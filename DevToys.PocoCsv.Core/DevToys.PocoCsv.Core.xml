<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DevToys.PocoCsv.Core</name>
    </assembly>
    <members>
        <member name="T:DevToys.PocoCsv.Core.ColumnAttribute">
            <summary>
            Csv Column Attribute to assign to POCO Properties.
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.ColumnAttribute.Index">
            <summary>
            Defines the index position within the CSV document. Numbers can be skipped for the reader to ignore certain columns, for the writer numbers can also be skipped which leads to empty columns.
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.ColumnAttribute.Header">
            <summary>
            Defines the header text, this property only applies to the CsvWriter, if not specified, the property name is used.
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.ColumnAttribute.OutputFormat">
            <summary>
            Apply a string format, depending on the Property type. This property is for CsvWriter only.
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.ColumnAttribute.OutputNullValue">
            <summary>
            Defines the value to write as a default for null, This property is for CsvWriter only.
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.ColumnAttribute.CustomParserType">
            <summary>
            Type implementing ICustomCsvParse
            </summary>
        </member>
        <member name="T:DevToys.PocoCsv.Core.CsvAttribute">
            <summary>
            Csv Class Attribute, use this to set default custom parsers.
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.FileName">
            <summary>
            File name only, can be used for the reader and writer when a directory is used in the contructor instead of a full file path.
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeString">
            <summary>
            Type implementing ICustomCsvParse string
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeGuid">
            <summary>
            Type implementing ICustomCsvParse Guid
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeBoolean">
            <summary>
            Type implementing ICustomCsvParse Boolean
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeDateTime">
            <summary>
            Type implementing ICustomCsvParse DateTime
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeDateTimeOffset">
            <summary>
            Type implementing ICustomCsvParse DateTimeOffset
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeTimeSpan">
            <summary>
            Type implementing ICustomCsvParse TimeSpan
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeByte">
            <summary>
            Type implementing ICustomCsvParse Byte
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeSByte">
            <summary>
            Type implementing ICustomCsvParse SByte
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeInt16">
            <summary>
            Type implementing ICustomCsvParse Int16
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeInt32">
            <summary>
            Type implementing ICustomCsvParse Int32
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeInt64">
            <summary>
            Type implementing ICustomCsvParse Int64
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeSingle">
            <summary>
            Type implementing ICustomCsvParse Single
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeDecimal">
            <summary>
            Type implementing ICustomCsvParse Decimal
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeDouble">
            <summary>
            Type implementing ICustomCsvParse Double
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeUInt16">
            <summary>
            Type implementing ICustomCsvParse UInt16
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeUInt32">
            <summary>
            Type implementing ICustomCsvParse UInt32
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeUInt64">
            <summary>
            Type implementing ICustomCsvParse UInt64
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeBigInteger">
            <summary>
            Type implementing ICustomCsvParse BigInteger
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeGuidNullable">
            <summary>
            Type implementing ICustomCsvParse Guid?
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeBooleanNullable">
            <summary>
            Type implementing ICustomCsvParse Boolean?
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeDateTimeNullable">
            <summary>
            Type implementing ICustomCsvParse DateTime?
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeDateTimeOffsetNullable">
            <summary>
            Type implementing ICustomCsvParse DateTimeOffset?
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeTimeSpanNullable">
            <summary>
            Type implementing ICustomCsvParse TimeSpan?
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeByteNullable">
            <summary>
            Type implementing ICustomCsvParse Byte?
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeSByteNullable">
            <summary>
            Type implementing ICustomCsvParse SByte?
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeInt16Nullable">
            <summary>
            Type implementing ICustomCsvParse Int16?
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeInt32Nullable">
            <summary>
            Type implementing ICustomCsvParse Int32?
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeInt64Nullable">
            <summary>
            Type implementing ICustomCsvParse Int64?
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeSingleNullable">
            <summary>
            Type implementing ICustomCsvParse Single?
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeDecimalNullable">
            <summary>
            Type implementing ICustomCsvParse Decimal?
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeDoubleNullable">
            <summary>
            Type implementing ICustomCsvParse Double?
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeUInt16Nullable">
            <summary>
            Type implementing ICustomCsvParse UInt16?
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeUInt32Nullable">
            <summary>
            Type implementing ICustomCsvParse UInt32?
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeUInt64Nullable">
            <summary>
            Type implementing ICustomCsvParse UInt64?
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvAttribute.DefaultCustomParserTypeBigIntegerNullable">
            <summary>
            Type implementing ICustomCsvParse BigInteger?
            </summary>
        </member>
        <member name="T:DevToys.PocoCsv.Core.BaseCsv">
            <summary>
            Base class for BaseCsvReader and BaseCsvWriter
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.BaseCsv.InitCustomCsvParseArrays(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.BaseCsv.InitImmutableArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.BaseCsv.SetCustomParserType(System.Int32,System.Type,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:DevToys.PocoCsv.Core.CsvColumnInfo">
            <summary>
            CsvUtils.GetCsvSchema result
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvColumnInfo.DatabaseType">
            <summary>
            Best Database type
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvColumnInfo.DotNetType">
            <summary>
            Best C# Type
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvColumnInfo.Index">
            <summary>
            Column index
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvColumnInfo.IsLast">
            <summary>
            Last Column
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvColumnInfo.Name">
            <summary>
            Column Name
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvColumnInfo.Nullable">
            <summary>
            Column is Nullable.
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvColumnInfo.SqlDatabaseType">
            <summary>
            Best Database type
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvColumnInfo.ToString">
            <summary>
            Returns Name
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvColumnInfo.Decontruct(System.Data.DbType@,DevToys.PocoCsv.Core.NetType@,System.Int32@,System.Boolean@,System.String@,System.Boolean@,System.Data.SqlDbType@)">
            <summary>
            Decontructor.
            </summary>
            <param name="databaseType"></param>
            <param name="dotNetType"></param>
            <param name="index"></param>
            <param name="isLast"></param>
            <param name="name"></param>
            <param name="nullable"></param>
            <param name="sqlDatabaseType"></param>
        </member>
        <member name="T:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject">
            <summary>
            Convenience class to read up to 50 CsvColumns from a Csv document
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field01">
            <summary>Column 1</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field02">
            <summary>Column 2</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field03">
            <summary>Column 3</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field04">
            <summary>Column 4</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field05">
            <summary>Column 5</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field06">
            <summary>Column 6</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field07">
            <summary>Column 7</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field08">
            <summary>Column 8</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field09">
            <summary>Column 9</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field10">
            <summary>Column 10</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field11">
            <summary>Column 11</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field12">
            <summary>Column 12</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field13">
            <summary>Column 13</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field14">
            <summary>Column 14</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field15">
            <summary>Column 15</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field16">
            <summary>Column 16</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field17">
            <summary>Column 17</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field18">
            <summary>Column 18</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field19">
            <summary>Column 19</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field20">
            <summary>Column 20</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field21">
            <summary>Column 21</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field22">
            <summary>Column 22</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field23">
            <summary>Column 23</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field24">
            <summary>Column 24</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field25">
            <summary>Column 25</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field26">
            <summary>Column 26</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field27">
            <summary>Column 27</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field28">
            <summary>Column 28</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field29">
            <summary>Column 29</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field30">
            <summary>Column 30</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field31">
            <summary>Column 31</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field32">
            <summary>Column 32</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field33">
            <summary>Column 33</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field34">
            <summary>Column 34</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field35">
            <summary>Column 35</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field36">
            <summary>Column 36</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field37">
            <summary>Column 37</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field38">
            <summary>Column 38</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field39">
            <summary>Column 39</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field40">
            <summary>Column 40</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field41">
            <summary>Column 41</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field42">
            <summary>Column 42</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field43">
            <summary>Column 43</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field44">
            <summary>Column 44</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field45">
            <summary>Column 45</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field46">
            <summary>Column 46</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field47">
            <summary>Column 47</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field48">
            <summary>Column 48</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field49">
            <summary>Column 49</summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Field50">
            <summary>Column 50</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 50</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 49</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 48</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 47</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 46</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 45</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 44</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 43</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 42</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 41</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 40</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 39</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 38</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 37</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 36</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 35</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 34</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 33</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 32</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 31</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 30</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 29</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 28</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 27</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 26</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 25</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 24</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 23</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 22</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 21</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 20</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 19</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 18</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 17</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 16</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 15</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 14</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 13</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 12</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 11</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 10</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 9</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 8</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 7</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 6</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 5</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@,System.String@)">
            <summary>Deconstruct 4</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@,System.String@)">
            <summary>Deconstruct 3</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@,System.String@)">
            <summary>Deconstruct 2</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deconstruct(System.String@)">
            <summary>Deconstruct 1</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.op_Equality(DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject,DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject)">
            <summary>Equal operator ==</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.op_Inequality(DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject,DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject)">
            <summary>Not equal operator !=</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.op_LessThan(DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject,DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject)">
            <summary>Smaller then</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.op_GreaterThan(DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject,DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject)">
            <summary>Larger then</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.op_Implicit(System.String)~DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject">
            <summary>Implicit cast from string to CsvDataTypeObject</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.op_Implicit(DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject)~System.String">
            <summary>Implicit cast from CsvDataTypeObject to string</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Serialize">
            <summary>
            Convert to Csv String
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Deserialize(System.String)">
            <summary>
            Convert csv string to Object.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Equals(DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable implementation.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject.CompareTo(DevToys.PocoCsv.Core.CsvDataTypeObject.CsvDataTypeObject)">
            <summary>
            Compares the current instance with another object of the same type and returns
            an integer that indicates whether the current instance precedes, follows, or
            occurs in the same position in the sort order as the other object.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The
            return value has these meanings: Value Meaning Less than zero This instance precedes
            other in the sort order. Zero This instance occurs in the same position in the
            sort order as other. Greater than zero This instance follows other in the sort
            order.
            </returns>
        </member>
        <member name="T:DevToys.PocoCsv.Core.CsvExtensionMethods">
            <summary>
            Deconstruct extension methods for string[]
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvExtensionMethods.ImportCsv(System.Data.DataTable,System.String,System.Nullable{System.Char},System.Boolean,System.Int32)">
            <summary>
            Import Csv into DataTable
            </summary>
            <param name="table"></param>
            <param name="file"></param>
            <param name="separator">null for auto detect.</param>
            <param name="setSchema">default true, in case of importing multiple of the same documents set it to false on the second call.</param>
            <param name="skipRows">First row is usually the header.</param>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvExtensionMethods.ExportCsv(System.Data.DataTable,System.String,System.Char)">
            <summary>
            Export datatable to Csv file
            </summary>
            <param name="table"></param>
            <param name="file"></param>
            <param name="separator"></param>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvExtensionMethods.JoinCsv(System.String[],System.Char)">
            <summary>
            Join array to Csv Line.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvExtensionMethods.SplitCsv(System.String,System.Char)">
            <summary>
            Split string on Csv rules.
            </summary>
            <param name="value"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvExtensionMethods.Deconstruct(System.String[],System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            string Deconstruct for 10 parameters.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvExtensionMethods.Deconstruct(System.String[],System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            string Deconstruct for 9 parameters.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvExtensionMethods.Deconstruct(System.String[],System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            string Deconstruct for 8 parameters.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvExtensionMethods.Deconstruct(System.String[],System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            string Deconstruct for 7 parameters.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvExtensionMethods.Deconstruct(System.String[],System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            string Deconstruct for 6 parameters.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvExtensionMethods.Deconstruct(System.String[],System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            string Deconstruct for 5 parameters.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvExtensionMethods.Deconstruct(System.String[],System.String@,System.String@,System.String@,System.String@)">
            <summary>
            string Deconstruct for 4 parameters.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvExtensionMethods.Deconstruct(System.String[],System.String@,System.String@,System.String@)">
            <summary>
            string Deconstruct for 3 parameters.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvExtensionMethods.Deconstruct(System.String[],System.String@,System.String@)">
            <summary>
            string Deconstruct for 2 parameters.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvExtensionMethods.Deconstruct(System.String[],System.String@)">
            <summary>
            string Deconstruct for 1 parameters.
            </summary>
        </member>
        <member name="T:DevToys.PocoCsv.Core.CsvReader`1">
            <summary>
            Enumerate Csv Stream Reader over T.
            Properties needs to be marked with ColumnAttribute
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReader`1.#ctor(System.IO.StreamReader,System.Char,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReader`1.#ctor(System.String,System.Char,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="path">File or directory, in case of directory, filename will be generated based on T or the FileName property from the CsvAttribute will be used.</param>
            <param name="separator">The separator to use, default: ','</param>
            <param name="buffersize"></param>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvReader`1.Separator">
            <summary>
            Csv Seperator to use default ','
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvReader`1.EmptyLineBehaviour">
            <summary>
            How should empty lines be treated.
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvReader`1.HasErrors">
            <summary>
            Indicates there are read conversion errors.
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvReader`1.Errors">
            <summary>
            Returns collection of error messages.
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvReader`1.EndOfStream">
            <summary>
            Indicates the stream has ended.
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvReader`1.CurrentLine">
            <summary>
            Returns current Line position.
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvReader`1.IgnoreColumnAttributes">
            <summary>
            All properties are handled in order of property occurrence and mapped directly to their respective index. Only use when CsvWriter has this set to true as well. (ColumnAttribute is ignored.)
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvReader`1.Encoding">
            <summary>
            the character encoding to use. (Use when DetectEncodingFromByteOrderMarks does not yield proper results.)
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvReader`1.DetectEncodingFromByteOrderMarks">
            <summary>
            indicates whether to look for byte order marks at the beginning of the file. Default: true
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvReader`1.BufferSize">
            <summary>
            Stream buffer size, Default: 1024
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvReader`1.Culture">
            <summary>
            Culture info to use for serialization.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReader`1.Dispose">
            <summary>
            Releases all resources used by the System.IO.TextReader object.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReader`1.Close">
            <summary>
            Close the CSV stream reader
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReader`1.Flush">
            <summary>
            Flush all buffers.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReader`1.DetectSeparator">
            <summary>
            Detect the separator by sampling first 10 rows. Position is moved to start after execution.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReader`1.MoveToStart">
            <summary>
            Moves the reader to the start position.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReader`1.Skip(System.Int32)">
            <summary>
            Skip 1 or more rows.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReader`1.Skip">
            <summary>
            Skip a single row.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReader`1.SkipHeader">
            <summary>
            MoveToStart then skip first row.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReader`1.ReadHeader">
            <summary>
            MoveToStart and reads the header as a string[] array.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReader`1.ReadAsEnumerable">
            <summary>
            Each iteration will read the next row from stream or file
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReader`1.Read">
            <summary>
            Reads the Csv line into object of type T and advances to the next.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReader`1.ReadCsvLine(System.Int32[])">
            <summary>
            Reads the CSV line into string array, and advances to the next.
            </summary>
            <param name="selectIndexes">Optionally select the indexes you need,</param>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReader`1.Open">
            <summary>
            Open the reader
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReader`1.Init">
            <summary>
            Initialize the CsvReader
            </summary>
        </member>
        <member name="T:DevToys.PocoCsv.Core.CsvReadError">
            <summary>
            Read error info, only when type conversions take place.
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvReadError.ColumnIndex">
             <summary>
            
             </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvReadError.PropertyName">
             <summary>
            
             </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvReadError.PropertyType">
             <summary>
            
             </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvReadError.Value">
             <summary>
            
             </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvReadError.LineNumber">
             <summary>
            
             </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvReadError.Exception">
            <summary>
            Exception Message
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReadError.ToString">
             <summary>
            
             </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReadError.Decontruct(System.Int32@,System.String@,System.Type@,System.String@,System.Int32@,System.Exception@)">
            <summary>
            Deconstructor
            </summary>
        </member>
        <member name="T:DevToys.PocoCsv.Core.CsvReadException">
            <summary>
            
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReadException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReadException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="values"></param>
        </member>
        <member name="T:DevToys.PocoCsv.Core.CsvException">
            <summary>
            
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:DevToys.PocoCsv.Core.CsvStreamReader">
            <summary>
            Implements a System.IO.TextReader that reads characters from a byte stream in a particular encoding.
            Extended with ReadCsvLine to read a Csv Line conform RFC 4180.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the System.IO.StreamReader class for the specified file name.
            </summary>
            <param name="path">The complete file path to be read.</param>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the System.IO.StreamReader class for the specified file name, with the specified character encoding, byte order mark detection option, and buffer size.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
            <param name="bufferSize">The minimum buffer size.</param>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the System.IO.StreamReader class for the specified stream.
            </summary>
            <param name="stream">The stream to be read.</param>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the System.IO.StreamReader class for the specified stream based on the specified character encoding, byte order mark detection option, and buffer size, and optionally leaves the stream open.
            </summary>
            <param name="stream">The stream to be read.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
            <param name="bufferSize">The minimum buffer size.</param>
            <param name="leaveOpen">true to leave the stream open after the System.IO.StreamReader object is disposed; otherwise, false.</param>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamReader.SetColumnIndexes(System.Int32[])">
            <summary>
            Limit the result array for ReadCsvLine to only these columns.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamReader.ResetColumnIndexes">
            <summary>
            Reset the column indexes to default, including all columns in the result array.
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvStreamReader.EndOfStream">
            <summary>
            Indicates the stream has ended.
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvStreamReader.CurrentLine">
            <summary>
            Returns the current line number
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvStreamReader.Position">
            <summary>
            Get / Sets the position.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamReader.MoveToStart">
            <summary>
            Move reader to the start position 0
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvStreamReader.Separator">
            <summary>
            Get / Sets the Separator character to use.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamReader.GetCsvSchema(System.Int32)">
            <summary>
            Returns a schema for the CSV with best fitted types to use.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamReader.DetectSeparator">
            <summary>
            Detect the separator by sampling first 10 rows. Position is moved to start after execution.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamReader.GetCsvSeparator(System.Int32)">
            <summary>
            Detects and sets CSV Separator.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamReader.Skip(System.Int32)">
            <summary>
            Use to skip first row without materializing, usefull for skipping header.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamReader.ReadCsvLine">
            <summary>
            Reads the CSV line into string array, and advances to the next.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamReader.ReadLine">
            <summary>
            Perform ReadCsvLine.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamReader.ReadAsEnumerable">
            <summary>
            Each iteration will read the next row from stream or file
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamReader.ReadCsvLineAsDictionary">
            <summary>
            Assumes first line is the Header with column names. 
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamReader.ReadAsEnumerableDictionary">
            <summary>
            Assumes first line is the Header with column names. 
            </summary>
        </member>
        <member name="T:DevToys.PocoCsv.Core.CsvStreamWriter">
            <summary>
            Implements a System.IO.TextWriter for writing characters to a stream in a particular encoding.
            Extended with WriteCsvLine to write a Csv Line conform RFC 4180.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamWriter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the System.IO.StreamWriter class for the specified file by using the default encoding and buffer size.
            </summary>
            <param name="path">The complete file path to write to. path can be a file name.</param>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.Int32)">
            <summary>
            Initializes a new instance of the System.IO.StreamWriter class for the specified file on the specified path, using the specified encoding and buffer size. If the file exists, it can be either overwritten or appended to. If the file does not exist, this constructor creates a new file.
            </summary>
            <param name="path">The complete file path to write to. path can be a file name.</param>
            <param name="append">true to append data to the file; false to overwrite the file. If the specified file does not exist, this parameter has no effect, and the constructor creates a new file.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="bufferSize">The buffer size, in bytes.</param>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the System.IO.StreamWriter class for the specified stream by using UTF-8 encoding and the default buffer size.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the System.IO.StreamWriter class for the specified file by using the default encoding and buffer size.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="bufferSize">The buffer size, in bytes.</param>
            <param name="leaveOpen">true to leave the stream open after the System.IO.StreamWriter object is disposed; otherwise, false.</param>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamWriter.SetColumnIndexes(System.Int32[])">
            <summary>
            Limit the output to selected indexes.
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvStreamWriter.Separator">
            <summary>
            Csv Seperator to use default ','
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvStreamWriter.CRLFMode">
            <summary>
            \r\n = CR + LF → Used as a new line character in Windows.
            \r = CR(Carriage Return) → Used as a new line character in Mac OS before X.
            \n = LF(Line Feed) → Used as a new line character in Unix/Mac OS X
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamWriter.WriteCsvLine(System.String[])">
            <summary>
            Write an array of strings to the Csv Stream and escapes when nececary.
            </summary>
            <param name="values">Array of strings</param>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamWriter.WriteCsvLine(System.Object[])">
            <summary>
            Write an array of strings to the Csv Stream and escapes when nececary.
            </summary>
            <param name="values">Array of objects</param>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamWriter.WriteCsvLine(System.Collections.Generic.IEnumerable{System.String})">
            <summary>: 
            Write an array of strings to the Csv Stream and escapes when nececary.
            </summary>
            <param name="values">Array of strings</param>
        </member>
        <member name="T:DevToys.PocoCsv.Core.CsvUtils">
            <summary>
            Csv Utilities.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvUtils.CsvHeader(System.String,System.Char)">
            <summary>
            Returns first row of CSV
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvUtils.CsvHeader(DevToys.PocoCsv.Core.CsvStreamReader,System.Char)">
            <summary>
            Returns first row of CSV
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvUtils.GetCsvSchema(DevToys.PocoCsv.Core.CsvStreamReader,System.Int32)">
            <summary>
            Returns a schema for the CSV with best fitted types to use.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvUtils.GetCsvSeparator(DevToys.PocoCsv.Core.CsvStreamReader,System.Char@,System.Int32)">
            <summary>
            Retrieves CSV separator from text.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvUtils.GetCsvSeparator(System.String,System.Char@)">
            <summary>
            Retrieves CSV separator from text.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvUtils.IsCsv(System.String,System.Char,System.Int32)">
            <summary>
            Test whether piece of text is CSV
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvUtils.IsCsv(DevToys.PocoCsv.Core.CsvStreamReader,System.Char,System.Int32)">
            <summary>
            Test whether piece of text is CSV
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvUtils.JoinCsvLine(System.String[])">
            <summary>
            Join a string as a CSV line.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvUtils.JoinCsvLine(System.Char,System.String[])">
            <summary>
            Join a string as a CSV line.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvUtils.SplitCsvLine(System.String,System.Char)">
            <summary>
            Split a CSV based line.
            </summary>
            <param name="s"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="T:DevToys.PocoCsv.Core.CsvWriter`1">
            <summary>
            Write T to Csv Stream from an IEnumerable source.
            </summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.CsvWriter`1._Separator">
            <summary>
            Separator to use. Default: ','
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvWriter`1.#ctor(System.String,System.Char)">
            <summary>
            Constructor
            </summary>
            <param name="path">File or directory, in case of directory, filename will be generated based on T or the FileName property from the CsvAttribute will be used.</param>
            <param name="separator">The separator to use, default: ','</param>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvWriter`1.#ctor(System.IO.Stream,System.Char)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvWriter`1.#ctor(System.String,System.Text.Encoding,System.Globalization.CultureInfo,DevToys.PocoCsv.Core.FileWriteMode,System.Char,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="path">File or directory, in case of directory, filename will be generated based on T or the FileName property from the CsvAttribute will be used.</param>
            <param name="separator">The separator to use, default: ','</param>
            <param name="encoding"></param>
            <param name="buffersize"></param>
            <param name="culture"></param>
            <param name="fileWriteMode"></param>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvWriter`1.#ctor(System.IO.Stream,System.Text.Encoding,System.Globalization.CultureInfo,System.Char,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvWriter`1.FileMode">
            <summary>
            Append or Create new, determined on the Open() method.
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvWriter`1.Separator">
            <summary>
            Csv Seperator to use default ','
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvWriter`1.CRLFMode">
            <summary>
            \r\n = CR + LF → Used as a new line character in Windows.
            \r = CR(Carriage Return) → Used as a new line character in Mac OS before X.
            \n = LF(Line Feed) → Used as a new line character in Unix/Mac OS X
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvWriter`1.NullValueBehaviour">
            <summary>
            How will the write behave with null objects.
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvWriter`1.IgnoreColumnAttributes">
            <summary>
            All properties are handled in order of property occurrence and mapped directly to their respective index. (ColumnAttribute is ignored.)
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvWriter`1.BufferSize">
            <summary>
            Stream buffer size, Default: 1024
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvWriter`1.Culture">
            <summary>
            Culture info to use for serialization.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvWriter`1.Dispose">
            <summary>
            Releases all resources used by the System.IO.TextReader object.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvWriter`1.Close">
            <summary>
            Close the CSV stream reader
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvWriter`1.ColumnLimit">
            <summary>
            Limit number of columns to a maximum ammount. (Default 0, no limit).
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvWriter`1.Flush">
            <summary>
            Flush all buffers.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvWriter`1.WriteHeader">
            <summary>
            Write header with property names of T.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvWriter`1.Write(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Write IEnumerable T to Csv Stream
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvWriter`1.Write(`0)">
            <summary>
            Write single row to CSV
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvWriter`1.Open">
            <summary>
            Initialize and open the CSV Stream Writer.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvWriter`1.Init">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="T:DevToys.PocoCsv.Core.CustomParsers.CustomBooleanParserNullable">
            <summary>
            Parses boolean values like on,true,yes,1 to True and off,false,no,0 to false, anything else is converted to Null.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CustomParsers.CustomBooleanParserNullable.Read(System.Text.StringBuilder)">
            <summary>
            
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CustomParsers.CustomBooleanParserNullable.Write(System.Nullable{System.Boolean})">
            <summary>
            
            </summary>
        </member>
        <member name="T:DevToys.PocoCsv.Core.CustomParsers.CustomBooleanParser">
            <summary>
            Parses boolean values like on,true,yes,1 to True and off,false,no,0 to false.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CustomParsers.CustomBooleanParser.Read(System.Text.StringBuilder)">
            <summary>
            
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CustomParsers.CustomBooleanParser.Write(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="T:DevToys.PocoCsv.Core.CustomParsers.CustomLowerCaseParser">
            <summary>
            Converts a field to lower case.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CustomParsers.CustomLowerCaseParser.Reading(System.Text.StringBuilder,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32,System.Char)">
            <summary>
            
            </summary>
        </member>
        <member name="T:DevToys.PocoCsv.Core.CustomParsers.CustomUpperCaseParser">
            <summary>
            Converts a field to upper case.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CustomParsers.CustomUpperCaseParser.Reading(System.Text.StringBuilder,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32,System.Char)">
            <summary>
            
            </summary>
        </member>
        <member name="T:DevToys.PocoCsv.Core.FileWriteMode">
            <summary>
            Determine behaviour on existing files.
            </summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.FileWriteMode.Overwrite">
            <summary>
            Delete existing, create new.
            </summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.FileWriteMode.Append">
            <summary>
            Append to existing file
            </summary>
        </member>
        <member name="T:DevToys.PocoCsv.Core.State">
            <summary>
            escaping state while parsing 
            </summary>
        </member>
        <member name="T:DevToys.PocoCsv.Core.EmptyLineBehaviour">
            <summary>
            How should empty lines be treated.
            </summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.EmptyLineBehaviour.DefaultInstance">
            <summary>
            Return a new instance of T
            </summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.EmptyLineBehaviour.NullValue">
            <summary>
            Return Null value for object.
            </summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.EmptyLineBehaviour.SkipAndReadNext">
            <summary>
            Skip the line and read the next.
            </summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.EmptyLineBehaviour.LogError">
            <summary>
            Add an entry in the LogErrors 
            </summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.EmptyLineBehaviour.ThrowException">
            <summary>
            Throw an Exception
            </summary>
        </member>
        <member name="T:DevToys.PocoCsv.Core.WriteNullValueBehaviour">
            <summary>
            How will the write behave with null objects.
            </summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.WriteNullValueBehaviour.Skip">
            <summary>
            Ignore the value
            </summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.WriteNullValueBehaviour.EmptyLine">
            <summary>
            Write an empty line
            </summary>
        </member>
        <member name="T:DevToys.PocoCsv.Core.CRLFMode">
            <summary>
            Indicate how lines are ended when writing CSV Files.
            </summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.CRLFMode.CRLF">
            <summary>
            \r\n = CR + LF → Used as a new line character in Windows
            </summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.CRLFMode.CR">
            <summary>
            \r = CR(Carriage Return) → Used as a new line character in Mac OS before X
            </summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.CRLFMode.LF">
            <summary>
             \n = LF(Line Feed) → Used as a new line character in Unix/Mac OS X
            </summary>
        </member>
        <member name="T:DevToys.PocoCsv.Core.NetType">
            <summary>
            Represents a DotNet Type returned by TypeUtils.GetNetType
            </summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.Unknown">
            <summary>Unknown Net Type</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.String">
            <summary>Type is String</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.Guid">
            <summary>Type is Guid</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.Boolean">
            <summary>Type is Bool</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.DateTime">
            <summary>Type is DateTime</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.DateTimeOffset">
            <summary>Type is DateTime Offset</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.TimeSpan">
            <summary>Type is TimeSpan</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.Byte">
            <summary>Type is Byte</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.SByte">
            <summary>Type is SByte</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.Int16">
            <summary>Type is Int16</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.Int32">
            <summary>Type is Int32</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.Int64">
            <summary>Type is Int64</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.Single">
            <summary>Type is Single</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.Decimal">
            <summary>Type is Decimal</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.Double">
            <summary>Type is Double</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.UInt16">
            <summary>Type is UInt16</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.UInt32">
            <summary>Type is UInt32</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.UInt64">
            <summary>Type is UInt64</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.Enum">
            <summary>Type is Enum</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.BigInteger">
            <summary>Type is BigInteger </summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.Null">
            <summary>Type is Null</summary>
        </member>
        <member name="T:DevToys.PocoCsv.Core.NetTypeComplete">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.String">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.Guid">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.Boolean">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.DateTime">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.DateTimeOffset">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.TimeSpan">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.Byte">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.SByte">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.Int16">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.Int32">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.Int64">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.Single">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.Decimal">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.Double">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.UInt16">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.UInt32">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.UInt64">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.Enum">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.GuidNullable">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.BooleanNullable">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.DateTimeNullable">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.DateTimeOffsetNullable">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.TimeSpanNullable">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.ByteNullable">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.SByteNullable">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.Int16Nullable">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.Int32Nullable">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.Int64Nullable">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.SingleNullable">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.DecimalNullable">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.DoubleNullable">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.UInt16Nullable">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.UInt32Nullable">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.UInt64Nullable">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.ByteArray">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.BigInteger">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.BigIntegerNullable">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.EnumNullable">
            <summary></summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetTypeComplete.Unknown">
            <summary></summary>
        </member>
        <member name="T:DevToys.PocoCsv.Core.ICustomCsvParse">
            <summary>
            Implement Custom parser by assigning the CustomParserType on ColumnAttribute
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.ICustomCsvParse.Reading(System.Text.StringBuilder,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32,System.Char)">
            <summary>
            This method is called when using CsvReader. It can be used as a support function to the Read function when reading per char might be a performance requirement.
            c is the character to use in the result text, escaping has already been done at this point.
            </summary>
            <param name="value">Stringbuilder to be appended with c ( value.Append(c); )</param>
            <param name="line">Current line number.</param>
            <param name="colIndex">Current column index.</param>
            <param name="readerPos">Reader position in document.</param>
            <param name="linePos">Position on csv line.</param>
            <param name="colPos">Position within column.</param>
            <param name="c">Current read char.</param>
        </member>
        <member name="T:DevToys.PocoCsv.Core.ICustomCsvParse`1">
            <summary>
            Implement Custom parser by assigning the CustomParserType on ColumnAttribute
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.ICustomCsvParse`1.Read(System.Text.StringBuilder)">
            <summary>
            This function is called when using CsvReader
            </summary>
            <returns>Return value must be the same as the property type the CustomParser is placed on.</returns>
        </member>
        <member name="M:DevToys.PocoCsv.Core.ICustomCsvParse`1.Write(`0)">
            <summary>
            This function is called when using CsvWriter
            T value must be the same as the property type the CustomParser is placed on.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.TypeUtils.BestNetType(DevToys.PocoCsv.Core.NetType,System.String)">
            <summary>
            For use in array of string values, it can be used to detect the best fitting type for a string value.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.TypeUtils.GetTypedValue(System.String,System.Boolean)">
            <summary>
            Returns a type value for a given string value.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.TypeUtils.GetDbType(DevToys.PocoCsv.Core.NetType)">
            <summary>
            Returns SqlDBType for a primitive C# type.
            </summary>
        </member>
        <member name="T:Delegates.CustomDelegates.StructGetFunc`2">
            <summary>
            Delegates for returning value of property from structure type by reference.
            </summary>
            <typeparam name="T">Type of structure</typeparam>
            <typeparam name="TProp">Property type</typeparam>
            <param name="i">Structure type instance</param>
            <returns>Value of a property</returns>
        </member>
        <member name="T:Delegates.CustomDelegates.StructIndex1GetFunc`3">
            <summary>
            Delegates for returning value of indexer with single index parameter from structure type by reference.
            </summary>
            <typeparam name="T">Structure type</typeparam>
            <typeparam name="TI1">Index parameter type</typeparam>
            <typeparam name="TReturn">Index return type</typeparam>
            <param name="instance">Structure type instance</param>
            <param name="index">Index parameter</param>
            <returns>Value of indexer at given index</returns>
        </member>
        <member name="T:Delegates.CustomDelegates.StructIndex1SetAction`3">
            <summary>
            Delegates for setting value of indexer with single index parameter in structure type by reference.
            </summary>
            <typeparam name="T">Structure type</typeparam>
            <typeparam name="TI1">Index parameter type</typeparam>
            <typeparam name="TProp">Property type</typeparam>
            <param name="i">Structure type instance</param>
            <param name="i1">Index parameter</param>
            <param name="value">Value of indexer to set at given parameter</param>
        </member>
        <member name="T:Delegates.CustomDelegates.StructIndex2GetFunc`4">
            <summary>
            Delegates for returning value of indexer with two index parameters from structure type by reference.
            </summary>
            <typeparam name="T">Structure type</typeparam>
            <typeparam name="TI1">First index parameter type</typeparam>
            <typeparam name="TI2">Second index parameter type</typeparam>
            <typeparam name="TProp">Property type</typeparam>
            <param name="i">Structure type instance</param>
            <param name="i1">First index parameter</param>
            <param name="i2">Second index parameter</param>
            <returns>Value of indexer at given index parameters</returns>
        </member>
        <member name="T:Delegates.CustomDelegates.StructIndex2SetAction`4">
            <summary>
            Delegates for setting value of indexer with two index parameters in structure type by reference.
            </summary>
            <typeparam name="T">Structure type</typeparam>
            <typeparam name="TI1">First index parameter type</typeparam>
            <typeparam name="TI2">Second index parameter type</typeparam>
            <typeparam name="TProp">Property type</typeparam>
            <param name="i">Structure type instance</param>
            <param name="i1">First index parameter</param>
            <param name="i2">Second index parameter</param>
            <param name="value">Value of indexer to set at given index parameters</param>
        </member>
        <member name="T:Delegates.CustomDelegates.StructIndex3GetFunc`5">
            <summary>
            Delegates for returning value of indexer with three index parameters from structure type by reference.
            </summary>
            <typeparam name="T">Structure type</typeparam>
            <typeparam name="TI1">First index parameter type</typeparam>
            <typeparam name="TI2">Second index parameter type</typeparam>
            <typeparam name="TI3">Third index parameter type</typeparam>
            <typeparam name="TProp">Property type</typeparam>
            <param name="i">Structure type instance</param>
            <param name="i1">First index parameter</param>
            <param name="i2">Second index parameter</param>
            <param name="i3">Third index parameter</param>
            <returns>Value of indexer at given index parameters</returns>
        </member>
        <member name="T:Delegates.CustomDelegates.StructIndex3SetAction`5">
            <summary>
            Delegates for setting value of indexer with three index parameters in structure type by reference.
            </summary>
            <typeparam name="T">Structure type</typeparam>
            <typeparam name="TI1">First index parameter type</typeparam>
            <typeparam name="TI2">Second index parameter type</typeparam>
            <typeparam name="TI3">Third index parameter type</typeparam>
            <typeparam name="TProp">Property type</typeparam>
            <param name="i">Structure type instance</param>
            <param name="i1">First index parameter</param>
            <param name="i2">Second index parameter</param>
            <param name="i3">Third index parameter</param>
            <param name="value">Value of indexer to set at given index parameters</param>
        </member>
        <member name="T:Delegates.CustomDelegates.StructIndexesSetAction`2">
            <summary>
            Delegates for setting value of indexer with unspecified index parameters in structure type by reference.
            </summary>
            <typeparam name="T">Structure type</typeparam>
            <typeparam name="TValue">Value type</typeparam>
            <param name="instance">Structure type instance</param>
            <param name="indexes">Set of indexer index parameters</param>
            <param name="value">Value of indexer to set at given index parameters</param>
        </member>
        <member name="T:Delegates.CustomDelegates.StructSetAction`2">
            <summary>
            Delegates for setting value of indexer with unspecified index parameters in structure type.
            </summary>
            <typeparam name="T">Structure type</typeparam>
            <typeparam name="TProp">Property type</typeparam>
            <param name="i">Structure type instance</param>
            <param name="value">Value of indexer to set at given index parameters</param>
            <returns>Changed structure value</returns>
        </member>
        <member name="T:Delegates.StructSetActionRef`2">
            <summary>
            Delegates for setting value of indexer with single index parameter in structure type by reference.
            </summary>
            <typeparam name="T">Structure type</typeparam>
            <typeparam name="TProp">Property type</typeparam>
            <param name="i">Structure type instance</param>
            <param name="value">Value of indexer to set at given index parameters</param>
        </member>
        <member name="T:Delegates.DelegateFactory">
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
        </member>
        <member name="M:Delegates.DelegateFactory.Contructor``1">
            <summary>
            Creates delegate for type constructor. Constructed type has to be return type of delegate.
            </summary>
            <typeparam name="TDelegate">Constructor delegate type. It should have parameters of searched constructor 
            and return constructed type.</typeparam>
            <returns>Requested constructor delegate</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.Contructor(System.Type,System.Type[])">
            <summary>
            Creates delegate for type constructor. Delegate takes array of objects as parameters of a constructor and
            returns constructed type as object.
            </summary>
            <param name="source">Type to be constructed</param>
            <param name="ctrArgs">Array of types of constructor parameters</param>
            <returns>Constructor delegate</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.Contructor``1(System.Type)">
            <summary>
            Creates delegate for type constructor returns constructed type as object.
            </summary>
            <typeparam name="TDelegate">Type of delegate to return. It should have parameters of searched 
            constructor and return constructed type.</typeparam>
            <param name="source">Type to be constructed</param>
            <returns>Constructor delegate</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.DefaultContructor``1">
            <summary>
            Creates delegate for type default constructor.
            </summary>
            <typeparam name="TSource">Type of instance to be created by delegate.</typeparam>
            <returns>Default constructor delegate</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.DefaultContructor(System.Type)">
            <summary>
            Creates delegate for type default constructor.
            </summary>
            <param name="type">Type to be constructed</param>
            <returns>Default constructor delegate</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.EventAdd``2(System.String)">
            <summary>
            Creates delegate for adding event handler with source instance type and event argument type
            </summary>
            <typeparam name="TSource">Source type with event</typeparam>
            <typeparam name="TEventArgs">Event argument type</typeparam>
            <param name="eventName">Name of an event</param>
            <returns>Delegate for event add accessor</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.EventAdd``1(System.Type,System.String)">
            <summary>
            Creates delegate for adding event handler with source instance as object and event argument type
            </summary>
            <typeparam name="TEventArgs">Event argument type</typeparam>
            <param name="source">Source type with defined event</param>
            <param name="eventName">Name of an event</param>
            <returns>Delegate for event add accessor</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.EventAdd``1(System.String)">
            <summary>
            Creates delegate for adding event handler with source instance type and event argument as object
            </summary>
            <typeparam name="TSource">Source type with event</typeparam>
            <param name="eventName">Name of an event</param>
            <returns>Delegate for event add accessor</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.EventAdd(System.Type,System.String)">
            <summary>
            Creates delegate for adding event handler with source instance as object and event argument as object
            </summary>
            <param name="source">Source type with defined event</param>
            <param name="eventName">Name of an event</param>
            <returns>Delegate for event add accessor</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.EventRemove``1(System.Type,System.String)">
            <summary>
            Creates delegate for removing event handler with source instance as object and event argument type
            </summary>
            <typeparam name="TEventArgs">Event argument type</typeparam>
            <param name="source">Source type with defined event</param>
            <param name="eventName">Name of an event</param>
            <returns>Delegate for event remove accessor</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.EventRemove``2(System.String)">
            <summary>
            Creates delegate for removing event handler with source instance type and event argument type
            </summary>
            <typeparam name="TSource">Source type with event</typeparam>
            <typeparam name="TEventArgs">Event argument type</typeparam>
            <param name="eventName">Name of an event</param>
            <returns>Delegate for event remove accessor</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.EventRemove``1(System.String)">
            <summary>
            Creates delegate for removing event handler with source instance type and event argument as object
            </summary>
            <typeparam name="TSource">Source type with event</typeparam>
            <param name="eventName">Name of an event</param>
            <returns>Delegate for event remove accessor</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.EventRemove(System.Type,System.String)">
            <summary>
            Creates delegate for removing event handler with source instance as object and event argument as object
            </summary>
            <param name="source">Source type with defined event</param>
            <param name="eventName">Name of an event</param>
            <returns>Delegate for event remove accessor</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.FieldGet``2(System.String)">
            <summary>
            Creates delegate for retrieving instance field value
            </summary>
            <typeparam name="TSource">Source type with defined field</typeparam>
            <typeparam name="TField">Type of field</typeparam>
            <param name="fieldName">Field name</param>
            <returns>Delegate for retrieving instance field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.FieldGetStruct``2(System.String)">
            <summary>
            Creates delegate for retrieving instance field value from structure type by reference
            </summary>
            <typeparam name="TSource">Source value type with defined field</typeparam>
            <typeparam name="TField">Type of field</typeparam>
            <param name="fieldName">Field name</param>
            <returns>Delegate for retrieving instance field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.FieldGet``1(System.Type,System.String)">
            <summary>
            Creates delegate for retrieving instance field value
            </summary>
            <typeparam name="TField">Type of field</typeparam>
            <param name="source">Type with defined field</param>
            <param name="fieldName">Field name</param>
            <returns>Delegate for retrieving instance field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.FieldGet(System.Type,System.String)">
            <summary>
            Creates delegate for retrieving instance field value as object from source instance as object
            </summary>
            <param name="source">Type with defined field</param>
            <param name="fieldName">Field name</param>
            <returns>Delegate for retrieving instance field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.FieldGet2``1(System.Type,System.String)">
            <summary>
            Creates delegate for retrieving instance field value from source instance as object
            </summary>
            <typeparam name="TField">Type of field</typeparam>
            <param name="source">Type with defined field</param>
            <param name="fieldName">Field name</param>
            <returns>Delegate for retrieving instance field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.FieldSetStructRef``1(System.Type,System.String)">
            <summary>
            Creates delegate for setting instance field value in structure type passed by reference as object
            </summary>
            <typeparam name="TField">Type of field</typeparam>
            <param name="source"></param>
            <param name="fieldName">Field name</param>
            <returns>Delegate for setting instance field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.FieldSetStruct``1(System.Type,System.String)">
            <summary>
            Creates delegate for setting instance field value in structure passed by value as object.
            Returns new value with changed field value.
            </summary>
            <typeparam name="TField">Type of field</typeparam>
            <param name="source">Type with defined field</param>
            <param name="fieldName">Field name</param>
            <returns>Delegate for setting instance field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.FieldSet``1(System.Type,System.String)">
            <summary>
            Creates delegate for setting instance field value in instance by passed by object
            </summary>
            <typeparam name="TField">Type of field</typeparam>
            <param name="source">Type with defined field</param>
            <param name="fieldName">Field name</param>
            <returns>Delegate for setting instance field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.FieldSetStruct``2(System.String)">
            <summary>
            Creates delegate for setting instance field value in structure by passed by type as reference
            </summary>
            <typeparam name="TSource">Source type with defined field</typeparam>
            <typeparam name="TField">Type of field</typeparam>
            <param name="fieldName">Field name</param>
            <returns>Delegate for setting instance field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.FieldSet``2(System.String)">
            <summary>
            Creates delegate for setting instance field value in instance
            </summary>
            <typeparam name="TSource">Source type with defined field</typeparam>
            <typeparam name="TField">Type of field</typeparam>
            <param name="fieldName">Field name</param>
            <returns>Delegate for setting instance field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.FieldSet(System.Type,System.String)">
            <summary>
            Creates delegate for setting instance field value as object in instance as object
            </summary>
            <param name="source">Type with defined field</param>
            <param name="fieldName">Field name</param>
            <returns>Delegate for setting instance field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.FieldSetStructRef(System.Type,System.String)">
            <summary>
            Creates delegate for setting instance field value as object in structure passed by reference as object
            </summary>
            <param name="source">Type with defined field</param>
            <param name="fieldName">Field name</param>
            <returns>Delegate for setting instance field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.FieldSetStruct(System.Type,System.String)">
            <summary>
            Creates delegate for setting instance field value as object in structure passed as object.
            Returns new value with changed field value.
            </summary>
            <param name="source">Type with defined field</param>
            <param name="fieldName">Field name</param>
            <returns>Delegate for setting instance field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.FieldSetWithCast``1(System.Type,System.String)">
            <summary>
            Creates delegate for setting instance field value in instance as object
            </summary>
            <typeparam name="TField">Type of field</typeparam>
            <param name="source">Type with defined field</param>
            <param name="fieldName">Field name</param>
            <returns>Delegate for setting instance field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.FieldSetWithCast``2(System.String)">
            <summary>
            Creates delegate for setting instance field value in instance
            </summary>
            <typeparam name="TSource">Source type with defined field</typeparam>
            <typeparam name="TField">Type of field</typeparam>
            <param name="fieldName">Field name</param>
            <returns>Delegate for setting instance field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerGet``3">
            <summary>
            Creates delegate for indexer get accessor at specified index
            </summary>
            <typeparam name="TSource">Source type with defined indexer</typeparam>
            <typeparam name="TReturn">Indexer return type</typeparam>
            <typeparam name="TIndex">Index parameter type</typeparam>
            <returns>Delegate for indexer get accessor at specified index</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerGet``4">
            <summary>
            Creates delegate for indexer get accessor at specified index
            </summary>
            <typeparam name="TSource">Source type with defined indexer</typeparam>
            <typeparam name="TReturn">Indexer return type</typeparam>
            <typeparam name="TIndex">First index parameter type</typeparam>
            <typeparam name="TIndex2">Second index parameter type</typeparam>
            <returns>Delegate for indexer get accessor with two indexes</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerGet``5">
            <summary>
            Creates delegate for indexer get accessor at specified three indexes from instance
            </summary>
            <typeparam name="TSource">Source type with defined indexer</typeparam>
            <typeparam name="TReturn">Indexer return type</typeparam>
            <typeparam name="TIndex">First index parameter type</typeparam>
            <typeparam name="TIndex2">Second index parameter type</typeparam>
            <typeparam name="TIndex3">Third index parameter type</typeparam>
            <returns>Delegate for indexer get accessor with two indexes</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerGet``2(System.Type)">
            <summary>
            Creates delegate for indexer get accessor at specified index from instance as object
            </summary>
            <typeparam name="TReturn">Indexer return type</typeparam>
            <typeparam name="TIndex">Index parameter type</typeparam>
            <param name="source">Type with defined indexer</param>
            <returns>Delegate for indexer get accessor at specified index</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerGet``3(System.Type)">
            <summary>
            Creates delegate for indexer get accessor at specified two indexes from instance as object
            </summary>
            <typeparam name="TReturn">Indexer return type</typeparam>
            <typeparam name="TIndex">First index parameter type</typeparam>
            <typeparam name="TIndex2">Second index parameter type</typeparam>
            <param name="source">Type with defined indexer</param>
            <returns>Delegate for indexer get accessor with two indexes</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerGet``4(System.Type)">
            <summary>
            Creates delegate for indexer get accessor at specified three indexes from instance as object
            </summary>
            <typeparam name="TReturn">Indexer return type</typeparam>
            <typeparam name="TIndex">First index parameter type</typeparam>
            <typeparam name="TIndex2">Second index parameter type</typeparam>
            <typeparam name="TIndex3">Third index parameter type</typeparam>
            <param name="source">Type with defined indexer</param>
            <returns>Delegate for indexer get accessor with three indexes</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerGet(System.Type,System.Type,System.Type[])">
            <summary>
            Creates delegate for indexer get accessor with unspecified number of indexes from instance as object
            </summary>
            <param name="source">Type with defined indexer</param>
            <param name="returnType">Return type of indexer</param>
            <param name="indexTypes">Collection of index parameters types</param>
            <returns>Delegate for indexer get accessor with array of indexes</returns>
            <remarks>
            <paramref name="returnType"/> parameter is not necessary, but for compatibility new method was created.
            This one will be removed in next release.
            </remarks>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerGetNew(System.Type,System.Type[])">
            <summary>
            Creates delegate for indexer get accessor with unspecified number of indexes from instance as object
            </summary>
            <param name="source">Type with defined indexer</param>
            <param name="indexTypes">Collection of index parameters types</param>
            <returns>Delegate for indexer get accessor with array of indexes</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerGetStruct``3">
            <summary>
            Creates delegate for indexer get accessor at specified index from structure passed by reference
            </summary>
            <typeparam name="TSource">Source type with defined indexer</typeparam>
            <typeparam name="TReturn">Indexer return type</typeparam>
            <typeparam name="TIndex">Index parameter type</typeparam>
            <returns>Delegate for indexer get accessor at specified index</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerGetStruct``4">
            <summary>
            Creates delegate for indexer get accessor at specified two indexes from structure passed by reference
            </summary>
            <typeparam name="TSource">Source type with defined indexer</typeparam>
            <typeparam name="TReturn">Indexer return type</typeparam>
            <typeparam name="TIndex">First index parameter type</typeparam>
            <typeparam name="TIndex2">Second index parameter type</typeparam>
            <returns>Delegate for indexer get accessor with two indexes</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerGetStruct``5">
            <summary>
            Creates delegate for indexer get accessor at specified three indexes from structure passed by reference
            </summary>
            <typeparam name="TSource">Source type with defined indexer</typeparam>
            <typeparam name="TReturn">Indexer return type</typeparam>
            <typeparam name="TIndex">First index parameter type</typeparam>
            <typeparam name="TIndex2">Second index parameter type</typeparam>
            <typeparam name="TIndex3">Third index parameter type</typeparam>
            <returns>Delegate for indexer get accessor with two indexes</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.DelegateIndexerGet(System.Type,System.Type[])">
            <summary>
            Creates delegate for indexer get accessor
            </summary>
            <param name="source">Type with defined indexer</param>
            <param name="indexTypes">Collection of indexer index parameters</param>
            <returns>Delegate for indexer get accessor</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerSet``2(System.Type)">
            <summary>
            Creates delegate for indexer set accessor at specified index from instance as object
            </summary>
            <typeparam name="TValue">Indexer value type</typeparam>
            <typeparam name="TIndex">Index parameter type</typeparam>
            <param name="source">Type with defined indexer</param>
            <returns>Delegate for indexer set accessor with single index</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerSetStruct``2(System.Type)">
            <summary>
            Creates delegate for indexer set accessor at specified index from structure as object passed by reference
            </summary>
            <typeparam name="TValue">Indexer value type</typeparam>
            <typeparam name="TIndex">Index parameter type</typeparam>
            <param name="source">Type with defined indexer</param>
            <returns>Delegate for indexer set accessor with single index</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerSet``3(System.Type)">
            <summary>
            Creates delegate for indexer set accessor at specified two indexes from instance as object
            </summary>
            <typeparam name="TValue">Indexer value type</typeparam>
            <typeparam name="TIndex">First index parameter type</typeparam>
            <typeparam name="TIndex2">Second index parameter type</typeparam>
            <param name="source">Type with defined indexer</param>
            <returns>Delegate for indexer set accessor with two indexes</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerSetStruct``3(System.Type)">
            <summary>
            Creates delegate for indexer set accessor at specified two indexes from structure as object passed by reference
            </summary>
            <typeparam name="TValue">Indexer value type</typeparam>
            <typeparam name="TIndex">First index parameter type</typeparam>
            <typeparam name="TIndex2">Second index parameter type</typeparam>
            <param name="source">Type with defined indexer</param>
            <returns>Delegate for indexer set accessor with two indexes</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerSet``4(System.Type)">
            <summary>
            Creates delegate for indexer set accessor at specified three indexes from instance as object
            </summary>
            <typeparam name="TValue">Indexer value type</typeparam>
            <typeparam name="TIndex">First index parameter type</typeparam>
            <typeparam name="TIndex2">Second index parameter type</typeparam>
            <typeparam name="TIndex3">Third index parameter type</typeparam>
            <param name="source">Type with defined indexer</param>
            <returns>Delegate for indexer set accessor with three indexes</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerSetStruct``4(System.Type)">
            <summary>
            Creates delegate for indexer set accessor at specified three indexes from structure as object
            passed by reference
            </summary>
            <typeparam name="TValue">Indexer value type</typeparam>
            <typeparam name="TIndex">First index parameter type</typeparam>
            <typeparam name="TIndex2">Second index parameter type</typeparam>
            <typeparam name="TIndex3">Third index parameter type</typeparam>
            <param name="source">Type with defined indexer</param>
            <returns>Delegate for indexer set accessor with three indexes</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerSet``3">
            <summary>
            Creates delegate for indexer set accessor at specified three indexes from instance as object
            </summary>
            <typeparam name="TSource">Source type with defined indexer</typeparam>
            <typeparam name="TValue">Indexer value type</typeparam>
            <typeparam name="TIndex">Index parameter type</typeparam>
            <returns>Delegate for indexer set accessor with specified index</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerSetStruct``3">
            <summary>
            Creates delegate for indexer set accessor at specified index from structure passed by reference
            </summary>
            <typeparam name="TSource">Source type with defined indexer</typeparam>
            <typeparam name="TValue">Indexer value type</typeparam>
            <typeparam name="TIndex">Index parameter type</typeparam>
            <returns>Delegate for indexer set accessor with specified index</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerSet``4">
            <summary>
            Creates delegate for indexer set accessor with two indexes
            </summary>
            <typeparam name="TSource">Source type with defined indexer</typeparam>
            <typeparam name="TValue">Indexer value type</typeparam>
            <typeparam name="TIndex">First index parameter type</typeparam>
            <typeparam name="TIndex2">Second index parameter type</typeparam>
            <returns>Delegate for indexer set accessor with two indexes</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerSetStruct``4">
            <summary>
            Creates delegate for indexer set accessor with two indexes from structure passed by reference
            </summary>
            <typeparam name="TSource">Source type with defined indexer</typeparam>
            <typeparam name="TValue">Indexer value type</typeparam>
            <typeparam name="TIndex">First index parameter type</typeparam>
            <typeparam name="TIndex2">Second index parameter type</typeparam>
            <returns>Delegate for indexer set accessor with two indexes</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerSet``5">
            <summary>
            Creates delegate for indexer set accessor with three indexes from instance
            </summary>
            <typeparam name="TSource">Source type with defined indexer</typeparam>
            <typeparam name="TValue">Indexer value type</typeparam>
            <typeparam name="TIndex">First index parameter type</typeparam>
            <typeparam name="TIndex2">Second index parameter type</typeparam>
            <typeparam name="TIndex3">Third index parameter type</typeparam>
            <returns>Delegate for indexer set accessor with three indexes</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerSetStruct``5">
            <summary>
            Creates delegate for indexer set accessor with three indexes from structure passed by reference
            </summary>
            <typeparam name="TSource">Source type with defined indexer</typeparam>
            <typeparam name="TValue">Indexer value type</typeparam>
            <typeparam name="TIndex">First index parameter type</typeparam>
            <typeparam name="TIndex2">Second index parameter type</typeparam>
            <typeparam name="TIndex3">Third index parameter type</typeparam>
            <returns>Delegate for indexer set accessor with three indexes</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.InstanceGenericMethod(System.Type,System.String,System.Type[],System.Type[])">
            <summary>
            Creates delegate to non-void generic instance method with unspecified number of parameters passed as array of objects from 
            instance as object 
            </summary>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <param name="paramsTypes">Types of parameters</param>
            <param name="typeParams">Type parameters for generic instance method</param>
            <returns>Delegate for non-void generic instance method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.InstanceGenericMethodVoid(System.Type,System.String,System.Type[],System.Type[])">
            <summary>
            Creates delegate to void generic instance method with unspecified number of parameters passed as array 
            of objects from instance as object
            </summary>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <param name="paramsTypes">Types of parameters</param>
            <param name="typeParams">Type parameters for generic instance method</param>
            <returns>Delegate for void generic instance method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.InstanceGenericMethod``1(System.Type,System.String,System.Type[],System.Type[])">
            <summary>
            Creates delegate to generic instance method with unspecified number of parameters passed as array 
            of objects from instance as object. 
            </summary>
            <typeparam name="TDelegate">Either Action{object,object[]} or Function{object,object[],object}</typeparam>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <param name="paramsTypes">Types of parameters</param>
            <param name="typeParams">Type parameters for generic instance method</param>
            <returns>Delegate for void generic instance method</returns>
            <remarks>
            Intended for internal use.
            </remarks>
        </member>
        <member name="M:Delegates.DelegateFactory.InstanceMethod(System.Type,System.String,System.Type[])">
            <summary>
            Creates delegate for non-void instance method with unspecified number of parameters passed as array of 
            objects from instance as object
            </summary>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <param name="paramsTypes">Types of parameters</param>
            <returns>Delegate for non-void instance method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.InstanceMethod``2(System.String)">
            <summary>
            Creates delegate for generic instance method with single type parameter
            </summary>
            <typeparam name="TDelegate">Delegate compatible with instance method signature</typeparam>
            <typeparam name="TParam1">Instance method type parameter</typeparam>
            <param name="name">Name of method</param>
            <returns>Delegate for instance method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.InstanceMethod``3(System.String)">
            <summary>
            Creates delegate for generic instance method with two type parameters
            </summary>
            <typeparam name="TDelegate">Delegate compatible with instance method signature</typeparam>
            <typeparam name="TParam1">First instance method type parameter</typeparam>
            <typeparam name="TParam2">Second instance method type parameter</typeparam>
            <param name="name">Name of method</param>
            <returns>Delegate for instance method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.InstanceMethod``4(System.String)">
            <summary>
            Creates delegate for generic instance method with three type parameters
            </summary>
            <typeparam name="TDelegate">Delegate compatible with instance method signature</typeparam>
            <typeparam name="TParam1">First instance method type parameter</typeparam>
            <typeparam name="TParam2">Second instance method type parameter</typeparam>
            <typeparam name="TParam3">Third instance method type parameter</typeparam>
            <param name="name">Name of method</param>
            <returns>Delegate for instance method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.InstanceMethod``1(System.String,System.Type[])">
            <summary>
            Creates delegate for (generic) instance method
            </summary>
            <typeparam name="TDelegate">Delegate compatible with instance method signature</typeparam>
            <param name="name">Name of method</param>
            <param name="typeParameters">Collection of type parameters for generic method</param>
            <returns>Delegate for instance method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.InstanceMethod``2(System.Type,System.String)">
            <summary>
            Creates delegate for generic instance method with single type parameter
            </summary>
            <typeparam name="TDelegate">
            Delegate compatible with instance method signature or with object as source
            </typeparam>
            <typeparam name="TParam1">Type parameter of generic method</typeparam>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <returns>Delegate for generic instance method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.InstanceMethod``3(System.Type,System.String)">
            <summary>
            Creates delegate for generic instance method with two type parameters
            </summary>
            <typeparam name="TDelegate">
            Delegate compatible with instance method signature or with object as source
            </typeparam>
            <typeparam name="TParam1">First type parameter of generic method</typeparam>
            <typeparam name="TParam2">Second type parameter of generic method</typeparam>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <returns>Delegate for generic instance method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.InstanceMethod``4(System.Type,System.String)">
            <summary>
            Creates delegate for generic instance method with three type parameters
            </summary>
            <typeparam name="TDelegate">
            Delegate compatible with instance method signature or with object as source
            </typeparam>
            <typeparam name="TParam1">First type parameter of generic method</typeparam>
            <typeparam name="TParam2">Second type parameter of generic method</typeparam>
            <typeparam name="TParam3">Third type parameter of generic method</typeparam>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <returns>Delegate for generic instance method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.InstanceMethod``1(System.Type,System.String,System.Type[])">
            <summary>
            Creates delegate for (generic) instance method with three type parameters
            </summary>
            <typeparam name="TDelegate">
            Delegate compatible with instance method signature or with object as source
            </typeparam>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <param name="typeParams">Collection of type parameters for generic method</param>
            <returns>Delegate for (generic) instance method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.InstanceMethodExpr``1(System.String)">
            <summary>
            Obsolete
            </summary>
            <typeparam name="TDelegate"></typeparam>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:Delegates.DelegateFactory.InstanceMethodVoid(System.Type,System.String,System.Type[])">
            <summary>
            Creates delegate for void instance method with unspecified number of parameters passed as array of 
            objects from instance as object
            </summary>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <param name="paramsTypes">Types of parameters</param>
            <returns>Delegate for void instance method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.PropertyGet``1(System.Type,System.String)">
            <summary>
            Creates delegate to instance property getter from instance as object with return type of property type
            </summary>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="source">Type with defined property</param>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for instance property getter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.PropertyGet(System.Type,System.String)">
            <summary>
            Creates delegate to instance property getter from instance as object with return type of object
            </summary>
            <param name="source">Type with defined property</param>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for instance property getter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.PropertyGet``2(System.String)">
            <summary>
            Creates delegate to instance property getter with return type of property type
            </summary>
            <typeparam name="TSource">Type with defined property</typeparam>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for instance property getter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.PropertyGet2``2(System.Type,System.String)">
            <summary>
            Obsolete
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="source"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Delegates.DelegateFactory.PropertyGetStruct``2(System.String)">
            <summary>
            Creates delegate to instance property getter from structure passed by reference with return type of 
            property type
            </summary>
            <typeparam name="TSource">Type with defined property</typeparam>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for instance property getter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.PropertySet``2(``0,System.String)">
            <summary>
            Creates delegate to instance property setter with value of property type
            </summary>
            <typeparam name="TSource">Type with defined property</typeparam>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="source">Type with defined property</param>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for instance property setter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.PropertySet``1(System.Type,System.String)">
            <summary>
            Creates delegate to instance property setter in instance as object with value of property type
            </summary>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="source">Type with defined property</param>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for instance property setter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.PropertySetStructRef``1(System.Type,System.String)">
            <summary>
            Creates delegate to instance property setter in structure passed by reference with value of 
            property type
            </summary>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="source">Type with defined property</param>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for instance property setter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.PropertySetStruct``1(System.Type,System.String)">
            <summary>
            Creates delegate to instance property setter in structure passed by value as object with value of 
            property type. Creates new instance with changed property.
            </summary>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="source">Type with defined property</param>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for instance property setter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.PropertySet(System.Type,System.String)">
            <summary>
            Creates delegate to instance property setter in instance as object with value as object
            </summary>
            <param name="source">Type with defined property</param>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for instance property setter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.PropertySetStructRef(System.Type,System.String)">
            <summary>
            Creates delegate to instance property setter in structure passed by reference as object with value as
            object
            </summary>
            <param name="source">Type with defined property</param>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for instance property setter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.PropertySetStruct(System.Type,System.String)">
            <summary>
            Creates delegate to instance property setter in structure passed by value as object with value of 
            object. Creates new instance with changed property.
            </summary>
            <param name="source">Type with defined property</param>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for instance property setter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.PropertySet``2(System.String)">
            <summary>
            Creates delegate to instance property setter with value of property type
            </summary>
            <typeparam name="TSource">Type with defined property</typeparam>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for instance property setter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.PropertySetStructRef``2(System.String)">
            <summary>
            Creates delegate to instance property setter in structure passed by reference with value of property 
            type
            </summary>
            <typeparam name="TSource">Type with defined property</typeparam>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for instance property setter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticFieldGet``2(System.String)">
            <summary>
            Creates delegate for retrieving static field value
            </summary>
            <typeparam name="TSource">Source type with defined field</typeparam>
            <typeparam name="TField">Type of field</typeparam>
            <param name="fieldName">Field name</param>
            <returns>Delegate for retrieving static field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticFieldGet``1(System.Type,System.String)">
            <summary>
            Creates delegate for retrieving static field value
            </summary>
            <typeparam name="TField">Type of field</typeparam>
            <param name="source">Type with defined field</param>
            <param name="fieldName">Field name</param>
            <returns>Delegate for retrieving static field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticFieldGet(System.Type,System.String)">
            <summary>
            Creates delegate for retrieving static field value as object
            </summary>
            <param name="source">Type with defined field</param>
            <param name="fieldName">Field name</param>
            <returns>Delegate for retrieving static field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticFieldGetExpr``2(System.String)">
            <summary>
            Obsolete
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TField"></typeparam>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticFieldSet``2(System.String)">
            <summary>
            Creates delegate for setting static field value
            </summary>
            <typeparam name="TSource">Source type with defined field</typeparam>
            <typeparam name="TField">Type of field</typeparam>
            <param name="fieldName">Field name</param>
            <returns>Delegate for setting static field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticFieldSet``1(System.Type,System.String)">
            <summary>
            Creates delegate for setting static field value
            </summary>
            <typeparam name="TField">Type of field</typeparam>
            <param name="source">Type with defined field</param>
            <param name="fieldName">Field name</param>
            <returns>Delegate for setting static field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticFieldSet(System.Type,System.String)">
            <summary>
            Creates delegate for setting static field value
            </summary>
            <param name="source">Type with defined field</param>
            <param name="fieldName">Field name</param>
            <returns>Delegate for setting static field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticMethod``3(System.String)">
            <summary>
            Creates delegate to static method with single type parameter
            </summary>
            <typeparam name="TSource">Type with defined method</typeparam>
            <typeparam name="TDelegate">Delegate compatible with method</typeparam>
            <typeparam name="TParam1">Method type parameter</typeparam>
            <param name="name">Name of method</param>
            <returns>Delegate for generic static method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticMethod``4(System.String)">
            <summary>
            Creates delegate to static method with two type parameters
            </summary>
            <typeparam name="TSource">Type with defined method</typeparam>
            <typeparam name="TDelegate">Delegate compatible with method</typeparam>
            <typeparam name="TParam1">First type parameter</typeparam>
            <typeparam name="TParam2">Second type parameter</typeparam>
            <param name="name">Name of method</param>
            <returns>Delegate for generic static method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticMethod``5(System.String)">
            <summary>
            Creates delegate to static method with three type parameters
            </summary>
            <typeparam name="TSource">Type with defined method</typeparam>
            <typeparam name="TDelegate">Delegate compatible with method</typeparam>
            <typeparam name="TParam1">First type parameter</typeparam>
            <typeparam name="TParam2">Second type parameter</typeparam>
            <typeparam name="TParam3">Third type parameter</typeparam>
            <param name="name">Name of method</param>
            <returns>Delegate for generic static method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticMethod``2(System.String,System.Type[])">
            <summary>
            Creates delegate to static method with unspecified number of type parameters
            </summary>
            <typeparam name="TSource">Type with defined method</typeparam>
            <typeparam name="TDelegate">Delegate compatible with method</typeparam>
            <param name="name">Name of method</param>
            <param name="typeParameters">Type parameters for generic static method</param>
            <returns>Delegate for generic static method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticMethod``2(System.Type,System.String)">
            <summary>
            Creates delegate to static method with single type parameter
            </summary>
            <typeparam name="TDelegate">Delegate compatible with method</typeparam>
            <typeparam name="TParam1">Method type parameter</typeparam>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <returns>Delegate for generic static method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticMethod``3(System.Type,System.String)">
            <summary>
            Creates delegate to static method with single type parameter
            </summary>
            <typeparam name="TDelegate">Delegate compatible with method</typeparam>
            <typeparam name="TParam1">First type parameter</typeparam>
            <typeparam name="TParam2">Second type parameter</typeparam>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <returns>Delegate for generic static method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticMethod``4(System.Type,System.String)">
            <summary>
            Creates delegate to static method with single type parameter
            </summary>
            <typeparam name="TDelegate">Delegate compatible with method</typeparam>
            <typeparam name="TParam1">First type parameter</typeparam>
            <typeparam name="TParam2">Second type parameter</typeparam>
            <typeparam name="TParam3">Third type parameter</typeparam>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <returns>Delegate for generic static method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticMethod``1(System.Type,System.String,System.Type[])">
            <summary>
            Creates delegate to static method with unspecified number of type parameters
            </summary>
            <typeparam name="TDelegate">Delegate compatible with method</typeparam>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <param name="typeParameters">Type parameters for generic static method</param>
            <returns>Delegate for generic static method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticGenericMethod(System.Type,System.String,System.Type[],System.Type[])">
            <summary>
            Creates delegate to non-void generic static method with unspecified number of parameters passed as array 
            of objects
            </summary>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <param name="paramsTypes">Types of parameters</param>
            <param name="typeParams">Type parameters for generic static method</param>
            <returns>Delegate for non-void generic static method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticGenericMethodVoid(System.Type,System.String,System.Type[],System.Type[])">
            <summary>
            Creates delegate to void generic static method with unspecified number of parameters passed as array 
            of objects
            </summary>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <param name="paramsTypes">Types of parameters</param>
            <param name="typeParams">Type parameters for generic static method</param>
            <returns>Delegate for void generic static method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticMethod``2(System.String)">
            <summary>
            Creates delegate to static method
            </summary>
            <typeparam name="TSource">Type with defined method</typeparam>
            <typeparam name="TDelegate">Delegate compatible with method</typeparam>
            <param name="name">Name of method</param>
            <returns>Delegate for static method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticMethod``1(System.Type,System.String)">
            <summary>
            Creates delegate to static method
            </summary>
            <typeparam name="TDelegate">Delegate compatible with method</typeparam>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <returns>Delegate for static method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticMethod(System.Type,System.String,System.Type[])">
            <summary>
            Creates delegate to non-void static method with unspecified number of parameters passed as array 
            of objects
            </summary>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <param name="paramsTypes">Types of parameters</param>
            <returns>Delegate for static method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticMethodVoid(System.Type,System.String,System.Type[])">
            <summary>
            Creates delegate to void static method with unspecified number of parameters passed as array of objects
            </summary>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <param name="paramsTypes">Types of parameters</param>
            <returns>Delegate for void static method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticMethod``1(System.Type,System.String,System.Type[],System.Type[])">
            <summary>
            Creates delegate to generic static method with unspecified number of parameters passed as array 
            of objects from instance as object. 
            </summary>
            <typeparam name="TDelegate">Either Action{object[]} or Function{object[],object}</typeparam>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <param name="paramsTypes">Types of parameters</param>
            <param name="typeParams">Type parameters for generic instance method</param>
            <returns>Delegate for void generic static method</returns>
            <remarks>
            Intended for internal use.
            </remarks>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticPropertyGet``2(System.String)">
            <summary>
            Creates delegate to static property getter with return type of property type
            </summary>
            <typeparam name="TSource">Type with defined property</typeparam>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for static property getter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticPropertyGet``1(System.Type,System.String)">
            <summary>
            Creates delegate to static property getter with return type of property type
            </summary>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="source">Type with defined property</param>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for static property getter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticPropertyGet(System.Type,System.String)">
            <summary>
            Creates delegate to static property getter with return type of object
            </summary>
            <param name="source">Type with defined property</param>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for static property getter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticPropertyGetExpr``1(System.Type,System.String)">
            <summary>
            Obsolete
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="source"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticPropertySet``2(System.String)">
            <summary>
            Creates delegate to static property setter with value of property type
            </summary>
            <typeparam name="TSource">Type with defined property</typeparam>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for static property setter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticPropertySet``1(System.Type,System.String)">
            <summary>
            Creates delegate to static property setter with value of property type
            </summary>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="source">Type with defined property</param>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for static property setter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticPropertySet(System.Type,System.String)">
            <summary>
            Creates delegate to static property setter with value of object
            </summary>
            <param name="source">Type with defined property</param>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for static property setter</returns>
        </member>
        <member name="T:Delegates.Extensions.CEventInfo">
            <summary>
            Compatibility class (wrapper) if version of .NET do not support v4.5 of <see cref="T:System.Reflection.EventInfo"/> class.
            </summary>
        </member>
        <member name="M:Delegates.Extensions.CEventInfo.#ctor(System.Reflection.EventInfo)">
            <summary>
            Wrapper constructor
            </summary>
            <param name="event">Incompatible <see cref="T:System.Reflection.EventInfo"/> class instance</param>
        </member>
        <member name="P:Delegates.Extensions.CEventInfo.AddMethod">
            <summary>
            Event add accessor.
            </summary>
        </member>
        <member name="P:Delegates.Extensions.CEventInfo.EventHandlerType">
            <summary>
            Proxy property of <see cref="P:System.Reflection.EventInfo.EventHandlerType"/>
            </summary>
        </member>
        <member name="P:Delegates.Extensions.CEventInfo.RemoveMethod">
            <summary>
            Event remove accessor.
            </summary>
        </member>
        <member name="T:Delegates.Extensions.CPropertyInfo">
            <summary>
            Compatibility class (wrapper) if version of .NET do not support v4.5 of <see cref="T:System.Reflection.EventInfo"/> class.
            </summary>
        </member>
        <member name="M:Delegates.Extensions.CPropertyInfo.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Wrapper constructor
            </summary>
            <param name="property">Incompatible <see cref="T:System.Reflection.PropertyInfo"/> class instance</param>
        </member>
        <member name="P:Delegates.Extensions.CPropertyInfo.GetMethod">
            <summary>
            Property get accessor
            </summary>
        </member>
        <member name="P:Delegates.Extensions.CPropertyInfo.PropertyType">
            <summary>
            Proxy property of <see cref="P:System.Reflection.PropertyInfo.PropertyType"/>
            </summary>
        </member>
        <member name="P:Delegates.Extensions.CPropertyInfo.SetMethod">
            <summary>
            Property set accessor
            </summary>
        </member>
        <member name="T:Delegates.Extensions.ExpressionsExtensions">
            <summary>
            Expression extension methods class
            </summary>
        </member>
        <member name="M:Delegates.Extensions.ExpressionsExtensions.GetNewExprParams(System.Collections.Generic.List{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Casts list of <see cref="T:System.Linq.Expressions.ParameterExpression"/> to .NET framework version collection compatible with second 
            parameter of  
            <see cref="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})"/>
            method
            </summary>
            <param name="parameters"></param>
            <returns>Collection compatible with method
            <see cref="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})"/>
            second parameter.
            </returns>
        </member>
        <member name="M:Delegates.Extensions.ExpressionsExtensions.GetLambdaExprParams(System.Collections.Generic.List{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Casts list of <see cref="T:System.Linq.Expressions.ParameterExpression"/> to .NET framework version collection compatible with second parameter
            of <see cref="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})"/>
            method.
            </summary>
            <param name="parameters">Collection of <see cref="T:System.Linq.Expressions.ParameterExpression"/></param>
            <returns>Collection compatible with method
            <see cref="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})"/>
            second parameter.
            </returns>
        </member>
        <member name="M:Delegates.Extensions.ExpressionsExtensions.GetLambdaExprParams(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.ParameterExpression)">
            <summary>
            Casts list of <see cref="T:System.Linq.Expressions.ParameterExpression"/> with instance parameter 
            <see cref="T:System.Linq.Expressions.ParameterExpression"/> to .NET framework version collection compatible with second parameter
            of <see cref="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})"/>
            method.
            </summary>
            <param name="parameters">Collection of <see cref="T:System.Linq.Expressions.ParameterExpression"/></param>
            <param name="sourceParam">Source instance <see cref="T:System.Linq.Expressions.ParameterExpression"/></param>
            <returns>Collection compatible with method
            <see cref="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})"/>
            second parameter.
            </returns>
        </member>
        <member name="M:Delegates.Extensions.ExpressionsExtensions.GetCallExprParams(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Casts list of <see cref="T:System.Linq.Expressions.ParameterExpression"/> to .NET framework version collection compatible with second parameter
            of <see cref="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})"/>
            method.
            </summary>
            <param name="parameters">Collection of <see cref="T:System.Linq.Expressions.ParameterExpression"/></param>
            <returns>Collection compatible with method
            <see cref="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})"/>
            second parameter.
            </returns>
        </member>
    </members>
</doc>
