<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DevToys.PocoCsv.Core</name>
    </assembly>
    <members>
        <member name="T:DevToys.PocoCsv.Core.BaseCsvReader">
            <summary>
            base class for CsvReader
            </summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.BaseCsvReader._StreamReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.BaseCsvReader.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.BaseCsvReader.#ctor(System.IO.Stream)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.BaseCsvReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Char,System.Boolean,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.BaseCsvReader.#ctor(System.String,System.Text.Encoding,System.Char,System.Boolean,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.BaseCsvReader.Culture">
            <summary>
            Culture info to use for serialization.
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.BaseCsvReader.Separator">
            <summary>
            Csv Seperator to use default ','
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.BaseCsvReader.DetectEncodingFromByteOrderMarks">
            <summary>
            Indicates whether to look for byte order marks at the beginning of the file.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.BaseCsvReader.Dispose">
            <summary>
            Releases all resources used by the System.IO.TextReader object.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.BaseCsvReader.Open">
            <summary>
            Initialize and open the CSV Stream Reader.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.BaseCsvReader.Close">
            <summary>
            Close the CSV stream reader
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.BaseCsvReader.Init">
            <summary>
            
            </summary>
        </member>
        <member name="T:DevToys.PocoCsv.Core.BaseCsvReaderWriter">
            <summary>
            Base class for BaseCsvReader and BaseCsvWriter
            </summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.BaseCsvReaderWriter._File">
            <summary>
            
            </summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.BaseCsvReaderWriter._Stream">
            <summary>
            
            </summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.BaseCsvReaderWriter._Separator">
            <summary>
            
            </summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.BaseCsvReaderWriter._BufferSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.BaseCsvReaderWriter.Encoding">
            <summary>
            The character encoding to use.
            </summary>
        </member>
        <member name="T:DevToys.PocoCsv.Core.BaseCsvWriter">
            <summary>
            base class for CsvWriter
            </summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.BaseCsvWriter._Properties">
            <summary>
            
            </summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.BaseCsvWriter._PropertyGetters">
            <summary>
            
            </summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.BaseCsvWriter._StreamWrtier">
            <summary>
            
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.BaseCsvWriter.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.BaseCsvWriter.#ctor(System.IO.Stream)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.BaseCsvWriter.#ctor(System.String,System.Text.Encoding,System.Globalization.CultureInfo,System.Char,System.Boolean,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.BaseCsvWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Globalization.CultureInfo,System.Char,System.Boolean,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.BaseCsvWriter.Culture">
            <summary>
            Culture info to use for serialization.
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.BaseCsvWriter.Separator">
            <summary>
            Csv Seperator to use default ','
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.BaseCsvWriter.Append">
            <summary>
            Write command can be used to append multiple collections to the open Csv Stream.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.BaseCsvWriter.Dispose">
            <summary>
            Releases all resources used by the System.IO.TextReader object.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.BaseCsvWriter.Close">
            <summary>
            Close the CSV stream reader
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.BaseCsvWriter.Open">
            <summary>
            Initialize and open the CSV Stream Writer.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.BaseCsvWriter.Init">
            <summary>
            
            </summary>
        </member>
        <member name="T:DevToys.PocoCsv.Core.ColumnAttribute">
            <summary>
            Csv Column Attribute to assign to POCO Properties.
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.ColumnAttribute.Index">
            <summary>
            Property corresponds to Csv Column Index.
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.ColumnAttribute.Header">
            <summary>
            Only used by CsvWriter
            </summary>
        </member>
        <member name="T:DevToys.PocoCsv.Core.CsvColumnInfo">
            <summary>
            CsvUtils.GetCsvSchema result
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvColumnInfo.DatabaseType">
            <summary>
            Best Database type
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvColumnInfo.DotNetType">
            <summary>
            Best C# Type
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvColumnInfo.Index">
            <summary>
            Column index
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvColumnInfo.IsLast">
            <summary>
            Last Column
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvColumnInfo.Name">
            <summary>
            Column Name
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvColumnInfo.Nullable">
            <summary>
            Column is Nullable.
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvColumnInfo.SqlDatabaseType">
            <summary>
            Best Database type
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvColumnInfo.ToString">
            <summary>
            Returns Name
            </summary>
        </member>
        <member name="T:DevToys.PocoCsv.Core.CsvReader`1">
            <summary>
            Enumerate Csv Stream Reader over T.
            Properties needs to be marked with ColumnAttribute
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvReader`1._AllPropertiesAreStrings">
            <summary>
            Increase performance by only allowing string properties (No implicit casting)
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReader`1.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReader`1.#ctor(System.IO.Stream)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReader`1.#ctor(System.IO.Stream,System.Text.Encoding,System.Char,System.Boolean,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReader`1.#ctor(System.String,System.Text.Encoding,System.Char,System.Boolean,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReader`1.Rows">
            <summary>
            
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReader`1.DetectSeparator">
            <summary>
            Detect the separator by sampling first 10 rows.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReader`1.ReadAsEnumerable">
            <summary>
            Each iteration will read the next row from stream or file
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReader`1.Skip(System.Int32)">
            <summary>
            Use to skip first row(s) combined with Read() method. for ReadAsEnumerable() just use the Enumerable Skip method.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReader`1.ReadOld">
            <summary>
            reads the CsvLine
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReader`1.Open">
            <summary>
            Open the reader
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReader`1.Init">
            <summary>
            Initialize the CsvReader
            </summary>
        </member>
        <member name="T:DevToys.PocoCsv.Core.CsvReaderDynamic">
            <summary>
            Enumerate Csv Stream Reader over dynamic. Slower for large sets.
            </summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.CsvReaderDynamic._CurrentRow">
            <summary>
            After Read, before Serialize. use this to prepare row values for serialization.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReaderDynamic.#ctor(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReaderDynamic.#ctor(System.IO.Stream)">
            <summary>
            
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReaderDynamic.#ctor(System.IO.Stream,System.Text.Encoding,System.Char,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReaderDynamic.#ctor(System.String,System.Text.Encoding,System.Char,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvReaderDynamic.FirstRowIsHeader">
            <summary>
            Dynamic property names will be as first header.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReaderDynamic.Open">
            <summary>
            Initialize and open the CSV Stream Reader.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReaderDynamic.Rows">
            <summary>
            
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReaderDynamic.ReadAsEnumerable">
            <summary>
            Each iteration will read the next row from stream or file.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReaderDynamic.Read">
            <summary>
            
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReaderDynamic.SampleRow">
            <summary>
            Reads first row as a string Array
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReaderDynamic.Init">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvReaderDynamic.EndOfStream">
            <summary>
            Indicates End of stream, use with Read funcion.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvReaderDynamic.DetectSeparator">
            <summary>
            Do a 10 line sample to detect and set separator, it will try ',', ';', '|', '\t', ':'
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvStreamer.Separator">
            <summary>
            
            </summary>
        </member>
        <member name="T:DevToys.PocoCsv.Core.CsvStreamReader">
            <summary>
            Implements a System.IO.TextReader that reads characters from a byte stream in a particular encoding.
            Extended with ReadCsvLine to read a Csv Line conform RFC 4180.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the System.IO.StreamReader class for the specified file name.
            </summary>
            <param name="path">The complete file path to be read.</param>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the System.IO.StreamReader class for the specified file name, with the specified character encoding, byte order mark detection option, and buffer size.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
            <param name="bufferSize">The minimum buffer size.</param>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamReader.#ctor(System.String,System.IO.FileStreamOptions)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="options"></param>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the System.IO.StreamReader class for the specified stream.
            </summary>
            <param name="stream">The stream to be read.</param>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the System.IO.StreamReader class for the specified stream based on the specified character encoding, byte order mark detection option, and buffer size, and optionally leaves the stream open.
            </summary>
            <param name="stream">The stream to be read.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
            <param name="bufferSize">The minimum buffer size.</param>
            <param name="leaveOpen">true to leave the stream open after the System.IO.StreamReader object is disposed; otherwise, false.</param>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvStreamReader.EndOfCsvStream">
            <summary>
            Indicates end of Csv Stream.
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvStreamReader.Position">
            <summary>
            Get / Sets the position.
            </summary>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvStreamReader.Separator">
            <summary>
            Get / Sets the Separator character to use.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamReader.GetCsvSchema(System.Int32)">
            <summary>
            Returns a schema for the CSV with best fitted types to use.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamReader.GetCsvSeparator(System.Int32)">
            <summary>
            Detects and sets CSV Separator.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamReader.ReadCsvLine">
            <summary>
            reads the CsvLine
            </summary>
        </member>
        <member name="T:DevToys.PocoCsv.Core.CsvStreamWriter">
            <summary>
            Implements a System.IO.TextWriter for writing characters to a stream in a particular encoding.
            Extended with WriteCsvLine to write a Csv Line conform RFC 4180.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamWriter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the System.IO.StreamWriter class for the specified file by using the default encoding and buffer size.
            </summary>
            <param name="path">The complete file path to write to. path can be a file name.</param>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.Int32)">
            <summary>
            Initializes a new instance of the System.IO.StreamWriter class for the specified file on the specified path, using the specified encoding and buffer size. If the file exists, it can be either overwritten or appended to. If the file does not exist, this constructor creates a new file.
            </summary>
            <param name="path">The complete file path to write to. path can be a file name.</param>
            <param name="append">true to append data to the file; false to overwrite the file. If the specified file does not exist, this parameter has no effect, and the constructor creates a new file.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="bufferSize">The buffer size, in bytes.</param>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamWriter.#ctor(System.String,System.Text.Encoding,System.IO.FileStreamOptions)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="encoding"></param>
            <param name="options"></param>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the System.IO.StreamWriter class for the specified stream by using UTF-8 encoding and the default buffer size.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the System.IO.StreamWriter class for the specified file by using the default encoding and buffer size.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="bufferSize">The buffer size, in bytes.</param>
            <param name="leaveOpen">true to leave the stream open after the System.IO.StreamWriter object is disposed; otherwise, false.</param>
        </member>
        <member name="P:DevToys.PocoCsv.Core.CsvStreamWriter.Separator">
            <summary>
            Csv Seperator to use default ','
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamWriter.WriteCsvLine(System.String[])">
            <summary>
            Write an array of strings to the Csv Stream and escapes when nececary.
            </summary>
            <param name="values">Array of strings</param>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvStreamWriter.WriteCsvLine(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Write an array of strings to the Csv Stream and escapes when nececary.
            </summary>
            <param name="values">Array of strings</param>
        </member>
        <member name="T:DevToys.PocoCsv.Core.CsvUtils">
            <summary>
            Csv Utilities.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvUtils.CsvHeader(System.String,System.Char)">
            <summary>
            Returns first row of CSV
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvUtils.CsvHeader(DevToys.PocoCsv.Core.CsvStreamReader,System.Char)">
            <summary>
            Returns first row of CSV
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvUtils.GetCsvSchema(DevToys.PocoCsv.Core.CsvStreamReader,System.Int32)">
            <summary>
            Returns a schema for the CSV with best fitted types to use.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvUtils.GetCsvSeparator(DevToys.PocoCsv.Core.CsvStreamReader,System.Char@,System.Int32)">
            <summary>
            Retrieves CSV separator from text.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvUtils.GetCsvSeparator(System.String,System.Char@)">
            <summary>
            Retrieves CSV separator from text.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvUtils.IsCsv(System.String,System.Char,System.Int32)">
            <summary>
            Test whether piece of text is CSV
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvUtils.IsCsv(DevToys.PocoCsv.Core.CsvStreamReader,System.Char,System.Int32)">
            <summary>
            Test whether piece of text is CSV
            </summary>
        </member>
        <member name="T:DevToys.PocoCsv.Core.CsvWriter`1">
            <summary>
            Write T to Csv Stream from an IEnumerable source.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvWriter`1.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvWriter`1.#ctor(System.IO.Stream)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvWriter`1.#ctor(System.String,System.Text.Encoding,System.Globalization.CultureInfo,System.Char,System.Boolean,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvWriter`1.#ctor(System.IO.Stream,System.Text.Encoding,System.Globalization.CultureInfo,System.Char,System.Boolean,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvWriter`1.Write(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Write IEnumerable T to Csv Stream
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvWriter`1.WriteHeader">
            <summary>
            Write header with property names of T.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvWriter`1.Write(`0)">
            <summary>
            Write single row to CSV
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvWriter`1.Open">
            <summary>
            Initialize and open the CSV Stream Writer.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvWriter`1.Init">
            <summary>
            
            </summary>
        </member>
        <member name="T:DevToys.PocoCsv.Core.CsvWriterDynamic">
            <summary>
            Write T to Csv Stream from an IEnumerable source.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvWriterDynamic.#ctor(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvWriterDynamic.#ctor(System.IO.Stream)">
            <summary>
            
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvWriterDynamic.#ctor(System.String,System.Text.Encoding,System.Globalization.CultureInfo,System.Char,System.Boolean,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvWriterDynamic.#ctor(System.IO.Stream,System.Text.Encoding,System.Globalization.CultureInfo,System.Char,System.Boolean,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvWriterDynamic.Open">
            <summary>
            Initialize and open the CSV Stream Writer.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvWriterDynamic.Init">
            <summary>
            
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.CsvWriterDynamic.Write(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Write IEnumerable T to Csv Stream
            </summary>
        </member>
        <member name="T:DevToys.PocoCsv.Core.NetType">
            <summary>
            Represents a DotNet Type returned by TypeUtils.GetNetType
            </summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.Unknown">
            <summary>Unknown Net Type</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.String">
            <summary>Type is String</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.Guid">
            <summary>Type is Guid</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.Boolean">
            <summary>Type is Bool</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.DateTime">
            <summary>Type is DateTime</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.DateTimeOffset">
            <summary>Type is DateTime Offset</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.TimeSpan">
            <summary>Type is TimeSpan</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.Byte">
            <summary>Type is Byte</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.SByte">
            <summary>Type is SByte</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.Int16">
            <summary>Type is Int16</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.Int32">
            <summary>Type is Int32</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.Int64">
            <summary>Type is Int64</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.Single">
            <summary>Type is Single</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.Decimal">
            <summary>Type is Decimal</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.Double">
            <summary>Type is Double</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.UInt16">
            <summary>Type is UInt16</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.UInt32">
            <summary>Type is UInt32</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.UInt64">
            <summary>Type is UInt64</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.Enum">
            <summary>Type is Enum</summary>
        </member>
        <member name="F:DevToys.PocoCsv.Core.NetType.Null">
            <summary>Type is Null</summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.TypeUtils.BestNetType(DevToys.PocoCsv.Core.NetType,System.String)">
            <summary>
            For use in array of string values, it can be used to detect the best fitting type for a string value.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.TypeUtils.GetTypedValue(System.String,System.Boolean)">
            <summary>
            Returns a type value for a given string value.
            </summary>
        </member>
        <member name="M:DevToys.PocoCsv.Core.TypeUtils.GetDbType(DevToys.PocoCsv.Core.NetType)">
            <summary>
            Returns SqlDBType for a primitive C# type.
            </summary>
        </member>
        <member name="T:Delegates.CustomDelegates.StructGetFunc`2">
            <summary>
            Delegates for returning value of property from structure type by reference.
            </summary>
            <typeparam name="T">Type of structure</typeparam>
            <typeparam name="TProp">Property type</typeparam>
            <param name="i">Structure type instance</param>
            <returns>Value of a property</returns>
        </member>
        <member name="T:Delegates.CustomDelegates.StructIndex1GetFunc`3">
            <summary>
            Delegates for returning value of indexer with single index parameter from structure type by reference.
            </summary>
            <typeparam name="T">Structure type</typeparam>
            <typeparam name="TI1">Index parameter type</typeparam>
            <typeparam name="TReturn">Index return type</typeparam>
            <param name="instance">Structure type instance</param>
            <param name="index">Index parameter</param>
            <returns>Value of indexer at given index</returns>
        </member>
        <member name="T:Delegates.CustomDelegates.StructIndex1SetAction`3">
            <summary>
            Delegates for setting value of indexer with single index parameter in structure type by reference.
            </summary>
            <typeparam name="T">Structure type</typeparam>
            <typeparam name="TI1">Index parameter type</typeparam>
            <typeparam name="TProp">Property type</typeparam>
            <param name="i">Structure type instance</param>
            <param name="i1">Index parameter</param>
            <param name="value">Value of indexer to set at given parameter</param>
        </member>
        <member name="T:Delegates.CustomDelegates.StructIndex2GetFunc`4">
            <summary>
            Delegates for returning value of indexer with two index parameters from structure type by reference.
            </summary>
            <typeparam name="T">Structure type</typeparam>
            <typeparam name="TI1">First index parameter type</typeparam>
            <typeparam name="TI2">Second index parameter type</typeparam>
            <typeparam name="TProp">Property type</typeparam>
            <param name="i">Structure type instance</param>
            <param name="i1">First index parameter</param>
            <param name="i2">Second index parameter</param>
            <returns>Value of indexer at given index parameters</returns>
        </member>
        <member name="T:Delegates.CustomDelegates.StructIndex2SetAction`4">
            <summary>
            Delegates for setting value of indexer with two index parameters in structure type by reference.
            </summary>
            <typeparam name="T">Structure type</typeparam>
            <typeparam name="TI1">First index parameter type</typeparam>
            <typeparam name="TI2">Second index parameter type</typeparam>
            <typeparam name="TProp">Property type</typeparam>
            <param name="i">Structure type instance</param>
            <param name="i1">First index parameter</param>
            <param name="i2">Second index parameter</param>
            <param name="value">Value of indexer to set at given index parameters</param>
        </member>
        <member name="T:Delegates.CustomDelegates.StructIndex3GetFunc`5">
            <summary>
            Delegates for returning value of indexer with three index parameters from structure type by reference.
            </summary>
            <typeparam name="T">Structure type</typeparam>
            <typeparam name="TI1">First index parameter type</typeparam>
            <typeparam name="TI2">Second index parameter type</typeparam>
            <typeparam name="TI3">Third index parameter type</typeparam>
            <typeparam name="TProp">Property type</typeparam>
            <param name="i">Structure type instance</param>
            <param name="i1">First index parameter</param>
            <param name="i2">Second index parameter</param>
            <param name="i3">Third index parameter</param>
            <returns>Value of indexer at given index parameters</returns>
        </member>
        <member name="T:Delegates.CustomDelegates.StructIndex3SetAction`5">
            <summary>
            Delegates for setting value of indexer with three index parameters in structure type by reference.
            </summary>
            <typeparam name="T">Structure type</typeparam>
            <typeparam name="TI1">First index parameter type</typeparam>
            <typeparam name="TI2">Second index parameter type</typeparam>
            <typeparam name="TI3">Third index parameter type</typeparam>
            <typeparam name="TProp">Property type</typeparam>
            <param name="i">Structure type instance</param>
            <param name="i1">First index parameter</param>
            <param name="i2">Second index parameter</param>
            <param name="i3">Third index parameter</param>
            <param name="value">Value of indexer to set at given index parameters</param>
        </member>
        <member name="T:Delegates.CustomDelegates.StructIndexesSetAction`2">
            <summary>
            Delegates for setting value of indexer with unspecified index parameters in structure type by reference.
            </summary>
            <typeparam name="T">Structure type</typeparam>
            <typeparam name="TValue">Value type</typeparam>
            <param name="instance">Structure type instance</param>
            <param name="indexes">Set of indexer index parameters</param>
            <param name="value">Value of indexer to set at given index parameters</param>
        </member>
        <member name="T:Delegates.CustomDelegates.StructSetAction`2">
            <summary>
            Delegates for setting value of indexer with unspecified index parameters in structure type.
            </summary>
            <typeparam name="T">Structure type</typeparam>
            <typeparam name="TProp">Property type</typeparam>
            <param name="i">Structure type instance</param>
            <param name="value">Value of indexer to set at given index parameters</param>
            <returns>Changed structure value</returns>
        </member>
        <member name="T:Delegates.StructSetActionRef`2">
            <summary>
            Delegates for setting value of indexer with single index parameter in structure type by reference.
            </summary>
            <typeparam name="T">Structure type</typeparam>
            <typeparam name="TProp">Property type</typeparam>
            <param name="i">Structure type instance</param>
            <param name="value">Value of indexer to set at given index parameters</param>
        </member>
        <member name="T:Delegates.DelegateFactory">
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
            <summary>
            Creates delegates for types members
            </summary>
        </member>
        <member name="M:Delegates.DelegateFactory.Contructor``1">
            <summary>
            Creates delegate for type constructor. Constructed type has to be return type of delegate.
            </summary>
            <typeparam name="TDelegate">Constructor delegate type. It should have parameters of searched constructor 
            and return constructed type.</typeparam>
            <returns>Requested constructor delegate</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.Contructor(System.Type,System.Type[])">
            <summary>
            Creates delegate for type constructor. Delegate takes array of objects as parameters of a constructor and
            returns constructed type as object.
            </summary>
            <param name="source">Type to be constructed</param>
            <param name="ctrArgs">Array of types of constructor parameters</param>
            <returns>Constructor delegate</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.Contructor``1(System.Type)">
            <summary>
            Creates delegate for type constructor returns constructed type as object.
            </summary>
            <typeparam name="TDelegate">Type of delegate to return. It should have parameters of searched 
            constructor and return constructed type.</typeparam>
            <param name="source">Type to be constructed</param>
            <returns>Constructor delegate</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.DefaultContructor``1">
            <summary>
            Creates delegate for type default constructor.
            </summary>
            <typeparam name="TSource">Type of instance to be created by delegate.</typeparam>
            <returns>Default constructor delegate</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.DefaultContructor(System.Type)">
            <summary>
            Creates delegate for type default constructor.
            </summary>
            <param name="type">Type to be constructed</param>
            <returns>Default constructor delegate</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.EventAdd``2(System.String)">
            <summary>
            Creates delegate for adding event handler with source instance type and event argument type
            </summary>
            <typeparam name="TSource">Source type with event</typeparam>
            <typeparam name="TEventArgs">Event argument type</typeparam>
            <param name="eventName">Name of an event</param>
            <returns>Delegate for event add accessor</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.EventAdd``1(System.Type,System.String)">
            <summary>
            Creates delegate for adding event handler with source instance as object and event argument type
            </summary>
            <typeparam name="TEventArgs">Event argument type</typeparam>
            <param name="source">Source type with defined event</param>
            <param name="eventName">Name of an event</param>
            <returns>Delegate for event add accessor</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.EventAdd``1(System.String)">
            <summary>
            Creates delegate for adding event handler with source instance type and event argument as object
            </summary>
            <typeparam name="TSource">Source type with event</typeparam>
            <param name="eventName">Name of an event</param>
            <returns>Delegate for event add accessor</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.EventAdd(System.Type,System.String)">
            <summary>
            Creates delegate for adding event handler with source instance as object and event argument as object
            </summary>
            <param name="source">Source type with defined event</param>
            <param name="eventName">Name of an event</param>
            <returns>Delegate for event add accessor</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.EventRemove``1(System.Type,System.String)">
            <summary>
            Creates delegate for removing event handler with source instance as object and event argument type
            </summary>
            <typeparam name="TEventArgs">Event argument type</typeparam>
            <param name="source">Source type with defined event</param>
            <param name="eventName">Name of an event</param>
            <returns>Delegate for event remove accessor</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.EventRemove``2(System.String)">
            <summary>
            Creates delegate for removing event handler with source instance type and event argument type
            </summary>
            <typeparam name="TSource">Source type with event</typeparam>
            <typeparam name="TEventArgs">Event argument type</typeparam>
            <param name="eventName">Name of an event</param>
            <returns>Delegate for event remove accessor</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.EventRemove``1(System.String)">
            <summary>
            Creates delegate for removing event handler with source instance type and event argument as object
            </summary>
            <typeparam name="TSource">Source type with event</typeparam>
            <param name="eventName">Name of an event</param>
            <returns>Delegate for event remove accessor</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.EventRemove(System.Type,System.String)">
            <summary>
            Creates delegate for removing event handler with source instance as object and event argument as object
            </summary>
            <param name="source">Source type with defined event</param>
            <param name="eventName">Name of an event</param>
            <returns>Delegate for event remove accessor</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.FieldGet``2(System.String)">
            <summary>
            Creates delegate for retrieving instance field value
            </summary>
            <typeparam name="TSource">Source type with defined field</typeparam>
            <typeparam name="TField">Type of field</typeparam>
            <param name="fieldName">Field name</param>
            <returns>Delegate for retrieving instance field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.FieldGetStruct``2(System.String)">
            <summary>
            Creates delegate for retrieving instance field value from structure type by reference
            </summary>
            <typeparam name="TSource">Source value type with defined field</typeparam>
            <typeparam name="TField">Type of field</typeparam>
            <param name="fieldName">Field name</param>
            <returns>Delegate for retrieving instance field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.FieldGet``1(System.Type,System.String)">
            <summary>
            Creates delegate for retrieving instance field value
            </summary>
            <typeparam name="TField">Type of field</typeparam>
            <param name="source">Type with defined field</param>
            <param name="fieldName">Field name</param>
            <returns>Delegate for retrieving instance field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.FieldGet(System.Type,System.String)">
            <summary>
            Creates delegate for retrieving instance field value as object from source instance as object
            </summary>
            <param name="source">Type with defined field</param>
            <param name="fieldName">Field name</param>
            <returns>Delegate for retrieving instance field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.FieldGet2``1(System.Type,System.String)">
            <summary>
            Creates delegate for retrieving instance field value from source instance as object
            </summary>
            <typeparam name="TField">Type of field</typeparam>
            <param name="source">Type with defined field</param>
            <param name="fieldName">Field name</param>
            <returns>Delegate for retrieving instance field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.FieldSetStructRef``1(System.Type,System.String)">
            <summary>
            Creates delegate for setting instance field value in structure type passed by reference as object
            </summary>
            <typeparam name="TField">Type of field</typeparam>
            <param name="source"></param>
            <param name="fieldName">Field name</param>
            <returns>Delegate for setting instance field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.FieldSetStruct``1(System.Type,System.String)">
            <summary>
            Creates delegate for setting instance field value in structure passed by value as object.
            Returns new value with changed field value.
            </summary>
            <typeparam name="TField">Type of field</typeparam>
            <param name="source">Type with defined field</param>
            <param name="fieldName">Field name</param>
            <returns>Delegate for setting instance field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.FieldSet``1(System.Type,System.String)">
            <summary>
            Creates delegate for setting instance field value in instance by passed by object
            </summary>
            <typeparam name="TField">Type of field</typeparam>
            <param name="source">Type with defined field</param>
            <param name="fieldName">Field name</param>
            <returns>Delegate for setting instance field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.FieldSetStruct``2(System.String)">
            <summary>
            Creates delegate for setting instance field value in structure by passed by type as reference
            </summary>
            <typeparam name="TSource">Source type with defined field</typeparam>
            <typeparam name="TField">Type of field</typeparam>
            <param name="fieldName">Field name</param>
            <returns>Delegate for setting instance field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.FieldSet``2(System.String)">
            <summary>
            Creates delegate for setting instance field value in instance
            </summary>
            <typeparam name="TSource">Source type with defined field</typeparam>
            <typeparam name="TField">Type of field</typeparam>
            <param name="fieldName">Field name</param>
            <returns>Delegate for setting instance field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.FieldSet(System.Type,System.String)">
            <summary>
            Creates delegate for setting instance field value as object in instance as object
            </summary>
            <param name="source">Type with defined field</param>
            <param name="fieldName">Field name</param>
            <returns>Delegate for setting instance field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.FieldSetStructRef(System.Type,System.String)">
            <summary>
            Creates delegate for setting instance field value as object in structure passed by reference as object
            </summary>
            <param name="source">Type with defined field</param>
            <param name="fieldName">Field name</param>
            <returns>Delegate for setting instance field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.FieldSetStruct(System.Type,System.String)">
            <summary>
            Creates delegate for setting instance field value as object in structure passed as object.
            Returns new value with changed field value.
            </summary>
            <param name="source">Type with defined field</param>
            <param name="fieldName">Field name</param>
            <returns>Delegate for setting instance field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.FieldSetWithCast``1(System.Type,System.String)">
            <summary>
            Creates delegate for setting instance field value in instance as object
            </summary>
            <typeparam name="TField">Type of field</typeparam>
            <param name="source">Type with defined field</param>
            <param name="fieldName">Field name</param>
            <returns>Delegate for setting instance field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.FieldSetWithCast``2(System.String)">
            <summary>
            Creates delegate for setting instance field value in instance
            </summary>
            <typeparam name="TSource">Source type with defined field</typeparam>
            <typeparam name="TField">Type of field</typeparam>
            <param name="fieldName">Field name</param>
            <returns>Delegate for setting instance field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerGet``3">
            <summary>
            Creates delegate for indexer get accessor at specified index
            </summary>
            <typeparam name="TSource">Source type with defined indexer</typeparam>
            <typeparam name="TReturn">Indexer return type</typeparam>
            <typeparam name="TIndex">Index parameter type</typeparam>
            <returns>Delegate for indexer get accessor at specified index</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerGet``4">
            <summary>
            Creates delegate for indexer get accessor at specified index
            </summary>
            <typeparam name="TSource">Source type with defined indexer</typeparam>
            <typeparam name="TReturn">Indexer return type</typeparam>
            <typeparam name="TIndex">First index parameter type</typeparam>
            <typeparam name="TIndex2">Second index parameter type</typeparam>
            <returns>Delegate for indexer get accessor with two indexes</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerGet``5">
            <summary>
            Creates delegate for indexer get accessor at specified three indexes from instance
            </summary>
            <typeparam name="TSource">Source type with defined indexer</typeparam>
            <typeparam name="TReturn">Indexer return type</typeparam>
            <typeparam name="TIndex">First index parameter type</typeparam>
            <typeparam name="TIndex2">Second index parameter type</typeparam>
            <typeparam name="TIndex3">Third index parameter type</typeparam>
            <returns>Delegate for indexer get accessor with two indexes</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerGet``2(System.Type)">
            <summary>
            Creates delegate for indexer get accessor at specified index from instance as object
            </summary>
            <typeparam name="TReturn">Indexer return type</typeparam>
            <typeparam name="TIndex">Index parameter type</typeparam>
            <param name="source">Type with defined indexer</param>
            <returns>Delegate for indexer get accessor at specified index</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerGet``3(System.Type)">
            <summary>
            Creates delegate for indexer get accessor at specified two indexes from instance as object
            </summary>
            <typeparam name="TReturn">Indexer return type</typeparam>
            <typeparam name="TIndex">First index parameter type</typeparam>
            <typeparam name="TIndex2">Second index parameter type</typeparam>
            <param name="source">Type with defined indexer</param>
            <returns>Delegate for indexer get accessor with two indexes</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerGet``4(System.Type)">
            <summary>
            Creates delegate for indexer get accessor at specified three indexes from instance as object
            </summary>
            <typeparam name="TReturn">Indexer return type</typeparam>
            <typeparam name="TIndex">First index parameter type</typeparam>
            <typeparam name="TIndex2">Second index parameter type</typeparam>
            <typeparam name="TIndex3">Third index parameter type</typeparam>
            <param name="source">Type with defined indexer</param>
            <returns>Delegate for indexer get accessor with three indexes</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerGet(System.Type,System.Type,System.Type[])">
            <summary>
            Creates delegate for indexer get accessor with unspecified number of indexes from instance as object
            </summary>
            <param name="source">Type with defined indexer</param>
            <param name="returnType">Return type of indexer</param>
            <param name="indexTypes">Collection of index parameters types</param>
            <returns>Delegate for indexer get accessor with array of indexes</returns>
            <remarks>
            <paramref name="returnType"/> parameter is not necessary, but for compatibility new method was created.
            This one will be removed in next release.
            </remarks>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerGetNew(System.Type,System.Type[])">
            <summary>
            Creates delegate for indexer get accessor with unspecified number of indexes from instance as object
            </summary>
            <param name="source">Type with defined indexer</param>
            <param name="indexTypes">Collection of index parameters types</param>
            <returns>Delegate for indexer get accessor with array of indexes</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerGetStruct``3">
            <summary>
            Creates delegate for indexer get accessor at specified index from structure passed by reference
            </summary>
            <typeparam name="TSource">Source type with defined indexer</typeparam>
            <typeparam name="TReturn">Indexer return type</typeparam>
            <typeparam name="TIndex">Index parameter type</typeparam>
            <returns>Delegate for indexer get accessor at specified index</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerGetStruct``4">
            <summary>
            Creates delegate for indexer get accessor at specified two indexes from structure passed by reference
            </summary>
            <typeparam name="TSource">Source type with defined indexer</typeparam>
            <typeparam name="TReturn">Indexer return type</typeparam>
            <typeparam name="TIndex">First index parameter type</typeparam>
            <typeparam name="TIndex2">Second index parameter type</typeparam>
            <returns>Delegate for indexer get accessor with two indexes</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerGetStruct``5">
            <summary>
            Creates delegate for indexer get accessor at specified three indexes from structure passed by reference
            </summary>
            <typeparam name="TSource">Source type with defined indexer</typeparam>
            <typeparam name="TReturn">Indexer return type</typeparam>
            <typeparam name="TIndex">First index parameter type</typeparam>
            <typeparam name="TIndex2">Second index parameter type</typeparam>
            <typeparam name="TIndex3">Third index parameter type</typeparam>
            <returns>Delegate for indexer get accessor with two indexes</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.DelegateIndexerGet(System.Type,System.Type[])">
            <summary>
            Creates delegate for indexer get accessor
            </summary>
            <param name="source">Type with defined indexer</param>
            <param name="indexTypes">Collection of indexer index parameters</param>
            <returns>Delegate for indexer get accessor</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerSet``2(System.Type)">
            <summary>
            Creates delegate for indexer set accessor at specified index from instance as object
            </summary>
            <typeparam name="TValue">Indexer value type</typeparam>
            <typeparam name="TIndex">Index parameter type</typeparam>
            <param name="source">Type with defined indexer</param>
            <returns>Delegate for indexer set accessor with single index</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerSetStruct``2(System.Type)">
            <summary>
            Creates delegate for indexer set accessor at specified index from structure as object passed by reference
            </summary>
            <typeparam name="TValue">Indexer value type</typeparam>
            <typeparam name="TIndex">Index parameter type</typeparam>
            <param name="source">Type with defined indexer</param>
            <returns>Delegate for indexer set accessor with single index</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerSet``3(System.Type)">
            <summary>
            Creates delegate for indexer set accessor at specified two indexes from instance as object
            </summary>
            <typeparam name="TValue">Indexer value type</typeparam>
            <typeparam name="TIndex">First index parameter type</typeparam>
            <typeparam name="TIndex2">Second index parameter type</typeparam>
            <param name="source">Type with defined indexer</param>
            <returns>Delegate for indexer set accessor with two indexes</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerSetStruct``3(System.Type)">
            <summary>
            Creates delegate for indexer set accessor at specified two indexes from structure as object passed by reference
            </summary>
            <typeparam name="TValue">Indexer value type</typeparam>
            <typeparam name="TIndex">First index parameter type</typeparam>
            <typeparam name="TIndex2">Second index parameter type</typeparam>
            <param name="source">Type with defined indexer</param>
            <returns>Delegate for indexer set accessor with two indexes</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerSet``4(System.Type)">
            <summary>
            Creates delegate for indexer set accessor at specified three indexes from instance as object
            </summary>
            <typeparam name="TValue">Indexer value type</typeparam>
            <typeparam name="TIndex">First index parameter type</typeparam>
            <typeparam name="TIndex2">Second index parameter type</typeparam>
            <typeparam name="TIndex3">Third index parameter type</typeparam>
            <param name="source">Type with defined indexer</param>
            <returns>Delegate for indexer set accessor with three indexes</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerSetStruct``4(System.Type)">
            <summary>
            Creates delegate for indexer set accessor at specified three indexes from structure as object
            passed by reference
            </summary>
            <typeparam name="TValue">Indexer value type</typeparam>
            <typeparam name="TIndex">First index parameter type</typeparam>
            <typeparam name="TIndex2">Second index parameter type</typeparam>
            <typeparam name="TIndex3">Third index parameter type</typeparam>
            <param name="source">Type with defined indexer</param>
            <returns>Delegate for indexer set accessor with three indexes</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerSet``3">
            <summary>
            Creates delegate for indexer set accessor at specified three indexes from instance as object
            </summary>
            <typeparam name="TSource">Source type with defined indexer</typeparam>
            <typeparam name="TValue">Indexer value type</typeparam>
            <typeparam name="TIndex">Index parameter type</typeparam>
            <returns>Delegate for indexer set accessor with specified index</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerSetStruct``3">
            <summary>
            Creates delegate for indexer set accessor at specified index from structure passed by reference
            </summary>
            <typeparam name="TSource">Source type with defined indexer</typeparam>
            <typeparam name="TValue">Indexer value type</typeparam>
            <typeparam name="TIndex">Index parameter type</typeparam>
            <returns>Delegate for indexer set accessor with specified index</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerSet``4">
            <summary>
            Creates delegate for indexer set accessor with two indexes
            </summary>
            <typeparam name="TSource">Source type with defined indexer</typeparam>
            <typeparam name="TValue">Indexer value type</typeparam>
            <typeparam name="TIndex">First index parameter type</typeparam>
            <typeparam name="TIndex2">Second index parameter type</typeparam>
            <returns>Delegate for indexer set accessor with two indexes</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerSetStruct``4">
            <summary>
            Creates delegate for indexer set accessor with two indexes from structure passed by reference
            </summary>
            <typeparam name="TSource">Source type with defined indexer</typeparam>
            <typeparam name="TValue">Indexer value type</typeparam>
            <typeparam name="TIndex">First index parameter type</typeparam>
            <typeparam name="TIndex2">Second index parameter type</typeparam>
            <returns>Delegate for indexer set accessor with two indexes</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerSet``5">
            <summary>
            Creates delegate for indexer set accessor with three indexes from instance
            </summary>
            <typeparam name="TSource">Source type with defined indexer</typeparam>
            <typeparam name="TValue">Indexer value type</typeparam>
            <typeparam name="TIndex">First index parameter type</typeparam>
            <typeparam name="TIndex2">Second index parameter type</typeparam>
            <typeparam name="TIndex3">Third index parameter type</typeparam>
            <returns>Delegate for indexer set accessor with three indexes</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.IndexerSetStruct``5">
            <summary>
            Creates delegate for indexer set accessor with three indexes from structure passed by reference
            </summary>
            <typeparam name="TSource">Source type with defined indexer</typeparam>
            <typeparam name="TValue">Indexer value type</typeparam>
            <typeparam name="TIndex">First index parameter type</typeparam>
            <typeparam name="TIndex2">Second index parameter type</typeparam>
            <typeparam name="TIndex3">Third index parameter type</typeparam>
            <returns>Delegate for indexer set accessor with three indexes</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.InstanceGenericMethod(System.Type,System.String,System.Type[],System.Type[])">
            <summary>
            Creates delegate to non-void generic instance method with unspecified number of parameters passed as array of objects from 
            instance as object 
            </summary>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <param name="paramsTypes">Types of parameters</param>
            <param name="typeParams">Type parameters for generic instance method</param>
            <returns>Delegate for non-void generic instance method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.InstanceGenericMethodVoid(System.Type,System.String,System.Type[],System.Type[])">
            <summary>
            Creates delegate to void generic instance method with unspecified number of parameters passed as array 
            of objects from instance as object
            </summary>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <param name="paramsTypes">Types of parameters</param>
            <param name="typeParams">Type parameters for generic instance method</param>
            <returns>Delegate for void generic instance method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.InstanceGenericMethod``1(System.Type,System.String,System.Type[],System.Type[])">
            <summary>
            Creates delegate to generic instance method with unspecified number of parameters passed as array 
            of objects from instance as object. 
            </summary>
            <typeparam name="TDelegate">Either Action{object,object[]} or Function{object,object[],object}</typeparam>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <param name="paramsTypes">Types of parameters</param>
            <param name="typeParams">Type parameters for generic instance method</param>
            <returns>Delegate for void generic instance method</returns>
            <remarks>
            Intended for internal use.
            </remarks>
        </member>
        <member name="M:Delegates.DelegateFactory.InstanceMethod(System.Type,System.String,System.Type[])">
            <summary>
            Creates delegate for non-void instance method with unspecified number of parameters passed as array of 
            objects from instance as object
            </summary>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <param name="paramsTypes">Types of parameters</param>
            <returns>Delegate for non-void instance method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.InstanceMethod``2(System.String)">
            <summary>
            Creates delegate for generic instance method with single type parameter
            </summary>
            <typeparam name="TDelegate">Delegate compatible with instance method signature</typeparam>
            <typeparam name="TParam1">Instance method type parameter</typeparam>
            <param name="name">Name of method</param>
            <returns>Delegate for instance method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.InstanceMethod``3(System.String)">
            <summary>
            Creates delegate for generic instance method with two type parameters
            </summary>
            <typeparam name="TDelegate">Delegate compatible with instance method signature</typeparam>
            <typeparam name="TParam1">First instance method type parameter</typeparam>
            <typeparam name="TParam2">Second instance method type parameter</typeparam>
            <param name="name">Name of method</param>
            <returns>Delegate for instance method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.InstanceMethod``4(System.String)">
            <summary>
            Creates delegate for generic instance method with three type parameters
            </summary>
            <typeparam name="TDelegate">Delegate compatible with instance method signature</typeparam>
            <typeparam name="TParam1">First instance method type parameter</typeparam>
            <typeparam name="TParam2">Second instance method type parameter</typeparam>
            <typeparam name="TParam3">Third instance method type parameter</typeparam>
            <param name="name">Name of method</param>
            <returns>Delegate for instance method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.InstanceMethod``1(System.String,System.Type[])">
            <summary>
            Creates delegate for (generic) instance method
            </summary>
            <typeparam name="TDelegate">Delegate compatible with instance method signature</typeparam>
            <param name="name">Name of method</param>
            <param name="typeParameters">Collection of type parameters for generic method</param>
            <returns>Delegate for instance method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.InstanceMethod``2(System.Type,System.String)">
            <summary>
            Creates delegate for generic instance method with single type parameter
            </summary>
            <typeparam name="TDelegate">
            Delegate compatible with instance method signature or with object as source
            </typeparam>
            <typeparam name="TParam1">Type parameter of generic method</typeparam>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <returns>Delegate for generic instance method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.InstanceMethod``3(System.Type,System.String)">
            <summary>
            Creates delegate for generic instance method with two type parameters
            </summary>
            <typeparam name="TDelegate">
            Delegate compatible with instance method signature or with object as source
            </typeparam>
            <typeparam name="TParam1">First type parameter of generic method</typeparam>
            <typeparam name="TParam2">Second type parameter of generic method</typeparam>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <returns>Delegate for generic instance method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.InstanceMethod``4(System.Type,System.String)">
            <summary>
            Creates delegate for generic instance method with three type parameters
            </summary>
            <typeparam name="TDelegate">
            Delegate compatible with instance method signature or with object as source
            </typeparam>
            <typeparam name="TParam1">First type parameter of generic method</typeparam>
            <typeparam name="TParam2">Second type parameter of generic method</typeparam>
            <typeparam name="TParam3">Third type parameter of generic method</typeparam>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <returns>Delegate for generic instance method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.InstanceMethod``1(System.Type,System.String,System.Type[])">
            <summary>
            Creates delegate for (generic) instance method with three type parameters
            </summary>
            <typeparam name="TDelegate">
            Delegate compatible with instance method signature or with object as source
            </typeparam>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <param name="typeParams">Collection of type parameters for generic method</param>
            <returns>Delegate for (generic) instance method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.InstanceMethodExpr``1(System.String)">
            <summary>
            Obsolete
            </summary>
            <typeparam name="TDelegate"></typeparam>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:Delegates.DelegateFactory.InstanceMethodVoid(System.Type,System.String,System.Type[])">
            <summary>
            Creates delegate for void instance method with unspecified number of parameters passed as array of 
            objects from instance as object
            </summary>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <param name="paramsTypes">Types of parameters</param>
            <returns>Delegate for void instance method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.PropertyGet``1(System.Type,System.String)">
            <summary>
            Creates delegate to instance property getter from instance as object with return type of property type
            </summary>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="source">Type with defined property</param>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for instance property getter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.PropertyGet(System.Type,System.String)">
            <summary>
            Creates delegate to instance property getter from instance as object with return type of object
            </summary>
            <param name="source">Type with defined property</param>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for instance property getter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.PropertyGet``2(System.String)">
            <summary>
            Creates delegate to instance property getter with return type of property type
            </summary>
            <typeparam name="TSource">Type with defined property</typeparam>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for instance property getter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.PropertyGet2``2(System.Type,System.String)">
            <summary>
            Obsolete
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="source"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Delegates.DelegateFactory.PropertyGetStruct``2(System.String)">
            <summary>
            Creates delegate to instance property getter from structure passed by reference with return type of 
            property type
            </summary>
            <typeparam name="TSource">Type with defined property</typeparam>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for instance property getter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.PropertySet``2(``0,System.String)">
            <summary>
            Creates delegate to instance property setter with value of property type
            </summary>
            <typeparam name="TSource">Type with defined property</typeparam>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="source">Type with defined property</param>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for instance property setter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.PropertySet``1(System.Type,System.String)">
            <summary>
            Creates delegate to instance property setter in instance as object with value of property type
            </summary>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="source">Type with defined property</param>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for instance property setter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.PropertySetStructRef``1(System.Type,System.String)">
            <summary>
            Creates delegate to instance property setter in structure passed by reference with value of 
            property type
            </summary>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="source">Type with defined property</param>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for instance property setter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.PropertySetStruct``1(System.Type,System.String)">
            <summary>
            Creates delegate to instance property setter in structure passed by value as object with value of 
            property type. Creates new instance with changed property.
            </summary>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="source">Type with defined property</param>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for instance property setter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.PropertySet(System.Type,System.String)">
            <summary>
            Creates delegate to instance property setter in instance as object with value as object
            </summary>
            <param name="source">Type with defined property</param>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for instance property setter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.PropertySetStructRef(System.Type,System.String)">
            <summary>
            Creates delegate to instance property setter in structure passed by reference as object with value as
            object
            </summary>
            <param name="source">Type with defined property</param>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for instance property setter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.PropertySetStruct(System.Type,System.String)">
            <summary>
            Creates delegate to instance property setter in structure passed by value as object with value of 
            object. Creates new instance with changed property.
            </summary>
            <param name="source">Type with defined property</param>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for instance property setter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.PropertySet``2(System.String)">
            <summary>
            Creates delegate to instance property setter with value of property type
            </summary>
            <typeparam name="TSource">Type with defined property</typeparam>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for instance property setter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.PropertySetStructRef``2(System.String)">
            <summary>
            Creates delegate to instance property setter in structure passed by reference with value of property 
            type
            </summary>
            <typeparam name="TSource">Type with defined property</typeparam>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for instance property setter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticFieldGet``2(System.String)">
            <summary>
            Creates delegate for retrieving static field value
            </summary>
            <typeparam name="TSource">Source type with defined field</typeparam>
            <typeparam name="TField">Type of field</typeparam>
            <param name="fieldName">Field name</param>
            <returns>Delegate for retrieving static field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticFieldGet``1(System.Type,System.String)">
            <summary>
            Creates delegate for retrieving static field value
            </summary>
            <typeparam name="TField">Type of field</typeparam>
            <param name="source">Type with defined field</param>
            <param name="fieldName">Field name</param>
            <returns>Delegate for retrieving static field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticFieldGet(System.Type,System.String)">
            <summary>
            Creates delegate for retrieving static field value as object
            </summary>
            <param name="source">Type with defined field</param>
            <param name="fieldName">Field name</param>
            <returns>Delegate for retrieving static field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticFieldGetExpr``2(System.String)">
            <summary>
            Obsolete
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TField"></typeparam>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticFieldSet``2(System.String)">
            <summary>
            Creates delegate for setting static field value
            </summary>
            <typeparam name="TSource">Source type with defined field</typeparam>
            <typeparam name="TField">Type of field</typeparam>
            <param name="fieldName">Field name</param>
            <returns>Delegate for setting static field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticFieldSet``1(System.Type,System.String)">
            <summary>
            Creates delegate for setting static field value
            </summary>
            <typeparam name="TField">Type of field</typeparam>
            <param name="source">Type with defined field</param>
            <param name="fieldName">Field name</param>
            <returns>Delegate for setting static field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticFieldSet(System.Type,System.String)">
            <summary>
            Creates delegate for setting static field value
            </summary>
            <param name="source">Type with defined field</param>
            <param name="fieldName">Field name</param>
            <returns>Delegate for setting static field value</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticMethod``3(System.String)">
            <summary>
            Creates delegate to static method with single type parameter
            </summary>
            <typeparam name="TSource">Type with defined method</typeparam>
            <typeparam name="TDelegate">Delegate compatible with method</typeparam>
            <typeparam name="TParam1">Method type parameter</typeparam>
            <param name="name">Name of method</param>
            <returns>Delegate for generic static method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticMethod``4(System.String)">
            <summary>
            Creates delegate to static method with two type parameters
            </summary>
            <typeparam name="TSource">Type with defined method</typeparam>
            <typeparam name="TDelegate">Delegate compatible with method</typeparam>
            <typeparam name="TParam1">First type parameter</typeparam>
            <typeparam name="TParam2">Second type parameter</typeparam>
            <param name="name">Name of method</param>
            <returns>Delegate for generic static method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticMethod``5(System.String)">
            <summary>
            Creates delegate to static method with three type parameters
            </summary>
            <typeparam name="TSource">Type with defined method</typeparam>
            <typeparam name="TDelegate">Delegate compatible with method</typeparam>
            <typeparam name="TParam1">First type parameter</typeparam>
            <typeparam name="TParam2">Second type parameter</typeparam>
            <typeparam name="TParam3">Third type parameter</typeparam>
            <param name="name">Name of method</param>
            <returns>Delegate for generic static method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticMethod``2(System.String,System.Type[])">
            <summary>
            Creates delegate to static method with unspecified number of type parameters
            </summary>
            <typeparam name="TSource">Type with defined method</typeparam>
            <typeparam name="TDelegate">Delegate compatible with method</typeparam>
            <param name="name">Name of method</param>
            <param name="typeParameters">Type parameters for generic static method</param>
            <returns>Delegate for generic static method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticMethod``2(System.Type,System.String)">
            <summary>
            Creates delegate to static method with single type parameter
            </summary>
            <typeparam name="TDelegate">Delegate compatible with method</typeparam>
            <typeparam name="TParam1">Method type parameter</typeparam>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <returns>Delegate for generic static method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticMethod``3(System.Type,System.String)">
            <summary>
            Creates delegate to static method with single type parameter
            </summary>
            <typeparam name="TDelegate">Delegate compatible with method</typeparam>
            <typeparam name="TParam1">First type parameter</typeparam>
            <typeparam name="TParam2">Second type parameter</typeparam>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <returns>Delegate for generic static method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticMethod``4(System.Type,System.String)">
            <summary>
            Creates delegate to static method with single type parameter
            </summary>
            <typeparam name="TDelegate">Delegate compatible with method</typeparam>
            <typeparam name="TParam1">First type parameter</typeparam>
            <typeparam name="TParam2">Second type parameter</typeparam>
            <typeparam name="TParam3">Third type parameter</typeparam>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <returns>Delegate for generic static method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticMethod``1(System.Type,System.String,System.Type[])">
            <summary>
            Creates delegate to static method with unspecified number of type parameters
            </summary>
            <typeparam name="TDelegate">Delegate compatible with method</typeparam>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <param name="typeParameters">Type parameters for generic static method</param>
            <returns>Delegate for generic static method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticGenericMethod(System.Type,System.String,System.Type[],System.Type[])">
            <summary>
            Creates delegate to non-void generic static method with unspecified number of parameters passed as array 
            of objects
            </summary>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <param name="paramsTypes">Types of parameters</param>
            <param name="typeParams">Type parameters for generic static method</param>
            <returns>Delegate for non-void generic static method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticGenericMethodVoid(System.Type,System.String,System.Type[],System.Type[])">
            <summary>
            Creates delegate to void generic static method with unspecified number of parameters passed as array 
            of objects
            </summary>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <param name="paramsTypes">Types of parameters</param>
            <param name="typeParams">Type parameters for generic static method</param>
            <returns>Delegate for void generic static method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticMethod``2(System.String)">
            <summary>
            Creates delegate to static method
            </summary>
            <typeparam name="TSource">Type with defined method</typeparam>
            <typeparam name="TDelegate">Delegate compatible with method</typeparam>
            <param name="name">Name of method</param>
            <returns>Delegate for static method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticMethod``1(System.Type,System.String)">
            <summary>
            Creates delegate to static method
            </summary>
            <typeparam name="TDelegate">Delegate compatible with method</typeparam>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <returns>Delegate for static method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticMethod(System.Type,System.String,System.Type[])">
            <summary>
            Creates delegate to non-void static method with unspecified number of parameters passed as array 
            of objects
            </summary>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <param name="paramsTypes">Types of parameters</param>
            <returns>Delegate for static method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticMethodVoid(System.Type,System.String,System.Type[])">
            <summary>
            Creates delegate to void static method with unspecified number of parameters passed as array of objects
            </summary>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <param name="paramsTypes">Types of parameters</param>
            <returns>Delegate for void static method</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticMethod``1(System.Type,System.String,System.Type[],System.Type[])">
            <summary>
            Creates delegate to generic static method with unspecified number of parameters passed as array 
            of objects from instance as object. 
            </summary>
            <typeparam name="TDelegate">Either Action{object[]} or Function{object[],object}</typeparam>
            <param name="source">Type with defined method</param>
            <param name="name">Name of method</param>
            <param name="paramsTypes">Types of parameters</param>
            <param name="typeParams">Type parameters for generic instance method</param>
            <returns>Delegate for void generic static method</returns>
            <remarks>
            Intended for internal use.
            </remarks>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticPropertyGet``2(System.String)">
            <summary>
            Creates delegate to static property getter with return type of property type
            </summary>
            <typeparam name="TSource">Type with defined property</typeparam>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for static property getter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticPropertyGet``1(System.Type,System.String)">
            <summary>
            Creates delegate to static property getter with return type of property type
            </summary>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="source">Type with defined property</param>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for static property getter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticPropertyGet(System.Type,System.String)">
            <summary>
            Creates delegate to static property getter with return type of object
            </summary>
            <param name="source">Type with defined property</param>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for static property getter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticPropertyGetExpr``1(System.Type,System.String)">
            <summary>
            Obsolete
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="source"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticPropertySet``2(System.String)">
            <summary>
            Creates delegate to static property setter with value of property type
            </summary>
            <typeparam name="TSource">Type with defined property</typeparam>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for static property setter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticPropertySet``1(System.Type,System.String)">
            <summary>
            Creates delegate to static property setter with value of property type
            </summary>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="source">Type with defined property</param>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for static property setter</returns>
        </member>
        <member name="M:Delegates.DelegateFactory.StaticPropertySet(System.Type,System.String)">
            <summary>
            Creates delegate to static property setter with value of object
            </summary>
            <param name="source">Type with defined property</param>
            <param name="propertyName">Name of property</param>
            <returns>Delegate for static property setter</returns>
        </member>
        <member name="T:Delegates.Extensions.CEventInfo">
            <summary>
            Compatibility class (wrapper) if version of .NET do not support v4.5 of <see cref="T:System.Reflection.EventInfo"/> class.
            </summary>
        </member>
        <member name="M:Delegates.Extensions.CEventInfo.#ctor(System.Reflection.EventInfo)">
            <summary>
            Wrapper constructor
            </summary>
            <param name="event">Incompatible <see cref="T:System.Reflection.EventInfo"/> class instance</param>
        </member>
        <member name="P:Delegates.Extensions.CEventInfo.AddMethod">
            <summary>
            Event add accessor.
            </summary>
        </member>
        <member name="P:Delegates.Extensions.CEventInfo.EventHandlerType">
            <summary>
            Proxy property of <see cref="P:System.Reflection.EventInfo.EventHandlerType"/>
            </summary>
        </member>
        <member name="P:Delegates.Extensions.CEventInfo.RemoveMethod">
            <summary>
            Event remove accessor.
            </summary>
        </member>
        <member name="T:Delegates.Extensions.CPropertyInfo">
            <summary>
            Compatibility class (wrapper) if version of .NET do not support v4.5 of <see cref="T:System.Reflection.EventInfo"/> class.
            </summary>
        </member>
        <member name="M:Delegates.Extensions.CPropertyInfo.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Wrapper constructor
            </summary>
            <param name="property">Incompatible <see cref="T:System.Reflection.PropertyInfo"/> class instance</param>
        </member>
        <member name="P:Delegates.Extensions.CPropertyInfo.GetMethod">
            <summary>
            Property get accessor
            </summary>
        </member>
        <member name="P:Delegates.Extensions.CPropertyInfo.PropertyType">
            <summary>
            Proxy property of <see cref="P:System.Reflection.PropertyInfo.PropertyType"/>
            </summary>
        </member>
        <member name="P:Delegates.Extensions.CPropertyInfo.SetMethod">
            <summary>
            Property set accessor
            </summary>
        </member>
        <member name="T:Delegates.Extensions.ExpressionsExtensions">
            <summary>
            Expression extension methods class
            </summary>
        </member>
        <member name="M:Delegates.Extensions.ExpressionsExtensions.GetNewExprParams(System.Collections.Generic.List{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Casts list of <see cref="T:System.Linq.Expressions.ParameterExpression"/> to .NET framework version collection compatible with second 
            parameter of  
            <see cref="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})"/>
            method
            </summary>
            <param name="parameters"></param>
            <returns>Collection compatible with method
            <see cref="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})"/>
            second parameter.
            </returns>
        </member>
        <member name="M:Delegates.Extensions.ExpressionsExtensions.GetLambdaExprParams(System.Collections.Generic.List{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Casts list of <see cref="T:System.Linq.Expressions.ParameterExpression"/> to .NET framework version collection compatible with second parameter
            of <see cref="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})"/>
            method.
            </summary>
            <param name="parameters">Collection of <see cref="T:System.Linq.Expressions.ParameterExpression"/></param>
            <returns>Collection compatible with method
            <see cref="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})"/>
            second parameter.
            </returns>
        </member>
        <member name="M:Delegates.Extensions.ExpressionsExtensions.GetLambdaExprParams(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.ParameterExpression)">
            <summary>
            Casts list of <see cref="T:System.Linq.Expressions.ParameterExpression"/> with instance parameter 
            <see cref="T:System.Linq.Expressions.ParameterExpression"/> to .NET framework version collection compatible with second parameter
            of <see cref="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})"/>
            method.
            </summary>
            <param name="parameters">Collection of <see cref="T:System.Linq.Expressions.ParameterExpression"/></param>
            <param name="sourceParam">Source instance <see cref="T:System.Linq.Expressions.ParameterExpression"/></param>
            <returns>Collection compatible with method
            <see cref="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})"/>
            second parameter.
            </returns>
        </member>
        <member name="M:Delegates.Extensions.ExpressionsExtensions.GetCallExprParams(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Casts list of <see cref="T:System.Linq.Expressions.ParameterExpression"/> to .NET framework version collection compatible with second parameter
            of <see cref="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})"/>
            method.
            </summary>
            <param name="parameters">Collection of <see cref="T:System.Linq.Expressions.ParameterExpression"/></param>
            <returns>Collection compatible with method
            <see cref="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})"/>
            second parameter.
            </returns>
        </member>
    </members>
</doc>
